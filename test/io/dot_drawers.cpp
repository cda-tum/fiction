//
// Created by marcel on 17.09.21.
//

#include <catch2/catch_test_macros.hpp>

#include "utils/blueprints/layout_blueprints.hpp"
#include "utils/version_info.hpp"

#include <fiction/io/dot_drawers.hpp>
#include <fiction/layouts/cartesian_layout.hpp>
#include <fiction/layouts/clocked_layout.hpp>
#include <fiction/layouts/gate_level_layout.hpp>
#include <fiction/layouts/hexagonal_layout.hpp>
#include <fiction/layouts/tile_based_layout.hpp>

#include <fmt/format.h>

#include <sstream>
#include <string>
#include <string_view>

using namespace fiction;

template <typename Lyt, typename Drawer>
void compare_dot_layout(const Lyt& lyt, const std::string_view& layout_print)
{
    std::stringstream dot_stream{};

    write_dot_layout<Lyt, Drawer>(lyt, dot_stream);

    CHECK(dot_stream.str() == layout_print);
}

TEST_CASE("Draw empty Cartesian layout", "[dot-drawers]")
{
    using gate_layout = gate_level_layout<clocked_layout<tile_based_layout<cartesian_layout<offset::ucoord_t>>>>;

    const gate_layout layout{{2, 2}};

    static const std::string layout_print =
        fmt::format("digraph layout {{  // Generated by {} ({})\n"
                    "splines=ortho;\n"
                    "nodesep=0.25;\n"
                    "ranksep=0.25;\n"
                    "rankdir=TB;\n"
                    "\n"
                    "node [fixedsize=true, width=0.5, height=0.5, shape=square, style=filled];\n"
                    "x0y0 [label=\"\", fillcolor=white];\n"
                    "x1y0 [label=\"\", fillcolor=white];\n"
                    "x2y0 [label=\"\", fillcolor=white];\n"
                    "x0y1 [label=\"\", fillcolor=white];\n"
                    "x1y1 [label=\"\", fillcolor=white];\n"
                    "x2y1 [label=\"\", fillcolor=white];\n"
                    "x0y2 [label=\"\", fillcolor=white];\n"
                    "x1y2 [label=\"\", fillcolor=white];\n"
                    "x2y2 [label=\"\", fillcolor=white];\n"
                    "\n"
                    "edge [constraint=false];\n"
                    "\n"
                    "edge [constraint=true, style=invis];\n"
                    "x0y0 -> x0y1 -> x0y2;\n"
                    "x1y0 -> x1y1 -> x1y2;\n"
                    "x2y0 -> x2y1 -> x2y2;\n"
                    "rank = same {{ x0y0 -> x1y0 -> x2y0 }};\n"
                    "rank = same {{ x0y1 -> x1y1 -> x2y1 }};\n"
                    "rank = same {{ x0y2 -> x1y2 -> x2y2 }};\n"
                    "}}\n",
                    FICTION_VERSION, FICTION_REPO);

    compare_dot_layout<gate_layout, gate_layout_cartesian_drawer<gate_layout, false, false>>(layout, layout_print);
}

TEST_CASE("Draw Cartesian layout blueprints", "[dot-drawers]")
{
    using gate_layout = gate_level_layout<clocked_layout<tile_based_layout<cartesian_layout<offset::ucoord_t>>>>;

    SECTION("AND-OR Layout")
    {
        const auto layout = blueprints::and_or_gate_layout<gate_layout>();

        static const std::string layout_print =
            fmt::format("digraph layout {{  // Generated by {} ({})\n"
                        "splines=ortho;\n"
                        "nodesep=0.25;\n"
                        "ranksep=0.25;\n"
                        "rankdir=TB;\n"
                        "\n"
                        "node [fixedsize=true, width=0.5, height=0.5, shape=square, style=filled];\n"
                        "x0y0 [label=\"f1\", fillcolor=snow2];\n"
                        "x1y0 [label=\"AND\", fillcolor=lightcoral];\n"
                        "x2y0 [label=\"x1\", fillcolor=snow2];\n"
                        "x3y0 [label=\"\", fillcolor=white];\n"
                        "x0y1 [label=\"\", fillcolor=white];\n"
                        "x1y1 [label=\"x2\", fillcolor=snow2];\n"
                        "x2y1 [label=\"OR\", fillcolor=palegreen2];\n"
                        "x3y1 [label=\"f2\", fillcolor=snow2];\n"
                        "\n"
                        "edge [constraint=false];\n"
                        "x2y0 -> x1y0 [style=solid];\n"
                        "x1y1 -> x1y0 [style=solid];\n"
                        "x1y1 -> x2y1 [style=solid];\n"
                        "x2y0 -> x2y1 [style=solid];\n"
                        "x1y0 -> x0y0 [style=solid];\n"
                        "x2y1 -> x3y1 [style=solid];\n"
                        "\n"
                        "edge [constraint=true, style=invis];\n"
                        "x0y0 -> x0y1;\n"
                        "x1y0 -> x1y1;\n"
                        "x2y0 -> x2y1;\n"
                        "x3y0 -> x3y1;\n"
                        "rank = same {{ x0y0 -> x1y0 -> x2y0 -> x3y0 }};\n"
                        "rank = same {{ x0y1 -> x1y1 -> x2y1 -> x3y1 }};\n"
                        "}}\n",
                        FICTION_VERSION, FICTION_REPO);

        compare_dot_layout<gate_layout, gate_layout_cartesian_drawer<gate_layout, false, false>>(layout, layout_print);
    }
    SECTION("XOR-MAJ Layout")
    {
        const auto layout = blueprints::xor_maj_gate_layout<gate_layout>();

        static const std::string layout_print =
            fmt::format("digraph layout {{  // Generated by {} ({})\n"
                        "splines=ortho;\n"
                        "nodesep=0.25;\n"
                        "ranksep=0.25;\n"
                        "rankdir=TB;\n"
                        "\n"
                        "node [fixedsize=true, width=0.5, height=0.5, shape=square, style=filled];\n"
                        "x0y0 [label=\"f2\", fillcolor=snow2];\n"
                        "x1y0 [label=\"XOR\", fillcolor=lightskyblue];\n"
                        "x2y0 [label=\"b\", fillcolor=snow2];\n"
                        "x3y0 [label=\"\", fillcolor=white];\n"
                        "x0y1 [label=\"\", fillcolor=white];\n"
                        "x1y1 [label=\"a\", fillcolor=snow2];\n"
                        "x2y1 [label=\"MAJ\", fillcolor=lightsalmon];\n"
                        "x3y1 [label=\"c\", fillcolor=snow2];\n"
                        "x0y2 [label=\"\", fillcolor=white];\n"
                        "x1y2 [label=\"\", fillcolor=white];\n"
                        "x2y2 [label=\"f1\", fillcolor=snow2];\n"
                        "x3y2 [label=\"\", fillcolor=white];\n"
                        "\n"
                        "edge [constraint=false];\n"
                        "x1y1 -> x2y1 [style=solid];\n"
                        "x2y0 -> x2y1 [style=solid];\n"
                        "x3y1 -> x2y1 [style=solid];\n"
                        "x1y1 -> x1y0 [style=solid];\n"
                        "x2y0 -> x1y0 [style=solid];\n"
                        "x2y1 -> x2y2 [style=solid];\n"
                        "x1y0 -> x0y0 [style=solid];\n"
                        "\n"
                        "edge [constraint=true, style=invis];\n"
                        "x0y0 -> x0y1 -> x0y2;\n"
                        "x1y0 -> x1y1 -> x1y2;\n"
                        "x2y0 -> x2y1 -> x2y2;\n"
                        "x3y0 -> x3y1 -> x3y2;\n"
                        "rank = same {{ x0y0 -> x1y0 -> x2y0 -> x3y0 }};\n"
                        "rank = same {{ x0y1 -> x1y1 -> x2y1 -> x3y1 }};\n"
                        "rank = same {{ x0y2 -> x1y2 -> x2y2 -> x3y2 }};\n"
                        "}}\n",
                        FICTION_VERSION, FICTION_REPO);

        compare_dot_layout<gate_layout, gate_layout_cartesian_drawer<gate_layout, false, false>>(layout, layout_print);
    }
    SECTION("Crossing Layout")
    {
        const auto layout = blueprints::crossing_layout<gate_layout>();

        static const std::string layout_print =
            fmt::format("digraph layout {{  // Generated by {} ({})\n"
                        "splines=ortho;\n"
                        "nodesep=0.25;\n"
                        "ranksep=0.25;\n"
                        "rankdir=TB;\n"
                        "\n"
                        "node [fixedsize=true, width=0.5, height=0.5, shape=square, style=filled];\n"
                        "x0y0 [label=\"\", fillcolor=white];\n"
                        "x1y0 [label=\"x1\", fillcolor=snow2];\n"
                        "x2y0 [label=\"x3\", fillcolor=snow2];\n"
                        "x3y0 [label=\"\", fillcolor=white];\n"
                        "x0y1 [label=\"x2\", fillcolor=snow2];\n"
                        "x1y1 [label=\"AND\", fillcolor=lightcoral];\n"
                        "x2y1 [label=\"+\", fillcolor=palegoldenrod];\n"
                        "x3y1 [label=\"f1\", fillcolor=snow2];\n"
                        "x0y2 [label=\"x4\", fillcolor=snow2];\n"
                        "x1y2 [label=\"BUF\", fillcolor=palegoldenrod];\n"
                        "x2y2 [label=\"AND\", fillcolor=lightcoral];\n"
                        "x3y2 [label=\"f2\", fillcolor=snow2];\n"
                        "\n"
                        "edge [constraint=false];\n"
                        "x1y0 -> x1y1 [style=solid];\n"
                        "x0y1 -> x1y1 [style=solid];\n"
                        "x2y0 -> x2y1 [style=solid];\n"
                        "x0y2 -> x1y2 [style=solid];\n"
                        "x2y1 -> x2y2 [style=solid];\n"
                        "x1y2 -> x2y2 [style=solid];\n"
                        "x1y1 -> x2y1 [style=solid];\n"
                        "x2y1 -> x3y1 [style=solid];\n"
                        "x2y2 -> x3y2 [style=solid];\n"
                        "\n"
                        "edge [constraint=true, style=invis];\n"
                        "x0y0 -> x0y1 -> x0y2;\n"
                        "x1y0 -> x1y1 -> x1y2;\n"
                        "x2y0 -> x2y1 -> x2y2;\n"
                        "x3y0 -> x3y1 -> x3y2;\n"
                        "rank = same {{ x0y0 -> x1y0 -> x2y0 -> x3y0 }};\n"
                        "rank = same {{ x0y1 -> x1y1 -> x2y1 -> x3y1 }};\n"
                        "rank = same {{ x0y2 -> x1y2 -> x2y2 -> x3y2 }};\n"
                        "}}\n",
                        FICTION_VERSION, FICTION_REPO);

        compare_dot_layout<gate_layout, gate_layout_cartesian_drawer<gate_layout, false, false>>(layout, layout_print);
    }
}

TEST_CASE("Draw empty hexagonal layouts", "[dot-drawers]")
{
    SECTION("odd row")
    {
        using gate_layout =
            gate_level_layout<clocked_layout<tile_based_layout<hexagonal_layout<offset::ucoord_t, odd_row_hex>>>>;

        const gate_layout layout{gate_layout::aspect_ratio_type{2, 2}};

        static const std::string layout_print =
            fmt::format("digraph layout {{  // Generated by {} ({})\n"
                        "splines=ortho;\n"
                        "nodesep=0.25;\n"
                        "ranksep=0.125;\n"
                        "rankdir=TB;\n"
                        "\n"
                        "node [fixedsize=true, width=0.5, height=0.5, shape=hexagon, orientation=30, style=filled];\n"
                        "x0y0 [label=\"\", fillcolor=white];\n"
                        "x1y0 [label=\"\", fillcolor=white];\n"
                        "x2y0 [label=\"\", fillcolor=white];\n"
                        "x0y1 [label=\"\", fillcolor=white];\n"
                        "x1y1 [label=\"\", fillcolor=white];\n"
                        "x2y1 [label=\"\", fillcolor=white];\n"
                        "x0y2 [label=\"\", fillcolor=white];\n"
                        "x1y2 [label=\"\", fillcolor=white];\n"
                        "x2y2 [label=\"\", fillcolor=white];\n"
                        "\n"
                        "edge [constraint=false];\n"
                        "\n"
                        "edge [constraint=true, style=invis];\n"
                        "node [label=\"\", width=0.5, height=0.5, style=invis];\n"
                        "rank = same {{ x0y0 -> x1y0 -> x2y0 }};\n"
                        "rank = same {{ x0y1 -> x1y1 -> x2y1 }};\n"
                        "rank = same {{ x0y2 -> x1y2 -> x2y2 }};\n"
                        "rank = same {{ invis1 -> x0y1 }};\n"
                        "invis1 -> x0y0;\n"
                        "invis1 -> x0y2;\n"
                        "x0y0 -> x0y1;\n"
                        "x1y0 -> x0y1;\n"
                        "x1y0 -> x1y1;\n"
                        "x2y0 -> x1y1;\n"
                        "x2y0 -> x2y1;\n"
                        "x0y1 -> x0y2;\n"
                        "x0y1 -> x1y2;\n"
                        "x1y1 -> x1y2;\n"
                        "x1y1 -> x2y2;\n"
                        "x2y1 -> x2y2;\n"
                        "}}\n",
                        FICTION_VERSION, FICTION_REPO);

        compare_dot_layout<gate_layout, gate_layout_hexagonal_drawer<gate_layout, false, false>>(layout, layout_print);
    }
    SECTION("even row")
    {
        using gate_layout =
            gate_level_layout<clocked_layout<tile_based_layout<hexagonal_layout<offset::ucoord_t, even_row_hex>>>>;

        const gate_layout layout{gate_layout::aspect_ratio_type{2, 2}};

        static const std::string layout_print =
            fmt::format("digraph layout {{  // Generated by {} ({})\n"
                        "splines=ortho;\n"
                        "nodesep=0.25;\n"
                        "ranksep=0.125;\n"
                        "rankdir=TB;\n"
                        "\n"
                        "node [fixedsize=true, width=0.5, height=0.5, shape=hexagon, orientation=30, style=filled];\n"
                        "x0y0 [label=\"\", fillcolor=white];\n"
                        "x1y0 [label=\"\", fillcolor=white];\n"
                        "x2y0 [label=\"\", fillcolor=white];\n"
                        "x0y1 [label=\"\", fillcolor=white];\n"
                        "x1y1 [label=\"\", fillcolor=white];\n"
                        "x2y1 [label=\"\", fillcolor=white];\n"
                        "x0y2 [label=\"\", fillcolor=white];\n"
                        "x1y2 [label=\"\", fillcolor=white];\n"
                        "x2y2 [label=\"\", fillcolor=white];\n"
                        "\n"
                        "edge [constraint=false];\n"
                        "\n"
                        "edge [constraint=true, style=invis];\n"
                        "node [label=\"\", width=0.5, height=0.5, style=invis];\n"
                        "rank = same {{ x0y0 -> x1y0 -> x2y0 }};\n"
                        "rank = same {{ x0y1 -> x1y1 -> x2y1 }};\n"
                        "rank = same {{ x0y2 -> x1y2 -> x2y2 }};\n"
                        "rank = same {{ invis0 -> x0y0 }};\n"
                        "invis0 -> x0y1;\n"
                        "rank = same {{ invis2 -> x0y2 }};\n"
                        "invis2 -> x0y1;\n"
                        "x0y0 -> x0y1;\n"
                        "x0y0 -> x1y1;\n"
                        "x1y0 -> x1y1;\n"
                        "x1y0 -> x2y1;\n"
                        "x2y0 -> x2y1;\n"
                        "x0y1 -> x0y2;\n"
                        "x1y1 -> x0y2;\n"
                        "x1y1 -> x1y2;\n"
                        "x2y1 -> x1y2;\n"
                        "x2y1 -> x2y2;\n"
                        "}}\n",
                        FICTION_VERSION, FICTION_REPO);

        compare_dot_layout<gate_layout, gate_layout_hexagonal_drawer<gate_layout, false, false>>(layout, layout_print);
    }
    SECTION("odd column")
    {
        using gate_layout =
            gate_level_layout<clocked_layout<tile_based_layout<hexagonal_layout<offset::ucoord_t, odd_column_hex>>>>;

        const gate_layout layout{gate_layout::aspect_ratio_type{2, 2}};

        static const std::string layout_print =
            fmt::format("digraph layout {{  // Generated by {} ({})\n"
                        "splines=ortho;\n"
                        "nodesep=0.25;\n"
                        "ranksep=0.125;\n"
                        "rankdir=LR;\n"
                        "\n"
                        "node [fixedsize=true, width=0.5, height=0.5, shape=hexagon, style=filled];\n"
                        "x0y0 [label=\"\", fillcolor=white];\n"
                        "x1y0 [label=\"\", fillcolor=white];\n"
                        "x2y0 [label=\"\", fillcolor=white];\n"
                        "x0y1 [label=\"\", fillcolor=white];\n"
                        "x1y1 [label=\"\", fillcolor=white];\n"
                        "x2y1 [label=\"\", fillcolor=white];\n"
                        "x0y2 [label=\"\", fillcolor=white];\n"
                        "x1y2 [label=\"\", fillcolor=white];\n"
                        "x2y2 [label=\"\", fillcolor=white];\n"
                        "\n"
                        "edge [constraint=false];\n"
                        "\n"
                        "edge [constraint=true, style=invis];\n"
                        "node [label=\"\", width=0.5, height=0.5, style=invis];\n"
                        "rank = same {{ x0y0 -> x0y1 -> x0y2 }};\n"
                        "rank = same {{ x1y0 -> x1y1 -> x1y2 }};\n"
                        "rank = same {{ x2y0 -> x2y1 -> x2y2 }};\n"
                        "rank = same {{ invis1 -> x1y0 }};\n"
                        "invis1 -> x0y0;\n"
                        "invis1 -> x2y0;\n"
                        "x0y0 -> x1y0;\n"
                        "x1y0 -> x2y1;\n"
                        "x1y0 -> x2y0;\n"
                        "x1y0 -> x0y1;\n"
                        "x0y1 -> x1y1;\n"
                        "x1y1 -> x2y2;\n"
                        "x1y1 -> x2y1;\n"
                        "x1y1 -> x0y2;\n"
                        "x0y2 -> x1y2;\n"
                        "x1y2 -> x2y2;\n"
                        "}}\n",
                        FICTION_VERSION, FICTION_REPO);

        compare_dot_layout<gate_layout, gate_layout_hexagonal_drawer<gate_layout, false, false>>(layout, layout_print);
    }
    SECTION("even column")
    {
        using gate_layout =
            gate_level_layout<clocked_layout<tile_based_layout<hexagonal_layout<offset::ucoord_t, even_column_hex>>>>;

        const gate_layout layout{gate_layout::aspect_ratio_type{2, 2}};

        static const std::string layout_print =
            fmt::format("digraph layout {{  // Generated by {} ({})\n"
                        "splines=ortho;\n"
                        "nodesep=0.25;\n"
                        "ranksep=0.125;\n"
                        "rankdir=LR;\n"
                        "\n"
                        "node [fixedsize=true, width=0.5, height=0.5, shape=hexagon, style=filled];\n"
                        "x0y0 [label=\"\", fillcolor=white];\n"
                        "x1y0 [label=\"\", fillcolor=white];\n"
                        "x2y0 [label=\"\", fillcolor=white];\n"
                        "x0y1 [label=\"\", fillcolor=white];\n"
                        "x1y1 [label=\"\", fillcolor=white];\n"
                        "x2y1 [label=\"\", fillcolor=white];\n"
                        "x0y2 [label=\"\", fillcolor=white];\n"
                        "x1y2 [label=\"\", fillcolor=white];\n"
                        "x2y2 [label=\"\", fillcolor=white];\n"
                        "\n"
                        "edge [constraint=false];\n"
                        "\n"
                        "edge [constraint=true, style=invis];\n"
                        "node [label=\"\", width=0.5, height=0.5, style=invis];\n"
                        "rank = same {{ x0y0 -> x0y1 -> x0y2 }};\n"
                        "rank = same {{ x1y0 -> x1y1 -> x1y2 }};\n"
                        "rank = same {{ x2y0 -> x2y1 -> x2y2 }};\n"
                        "rank = same {{ invis0 -> x0y0 }};\n"
                        "invis0 -> x1y0;\n"
                        "rank = same {{ invis2 -> x2y0 }};\n"
                        "invis2 -> x1y0;\n"
                        "x0y0 -> x1y1;\n"
                        "x0y0 -> x1y0;\n"
                        "x1y0 -> x2y0;\n"
                        "x2y0 -> x1y1;\n"
                        "x0y1 -> x1y2;\n"
                        "x0y1 -> x1y1;\n"
                        "x1y1 -> x2y1;\n"
                        "x2y1 -> x1y2;\n"
                        "x0y2 -> x1y2;\n"
                        "x1y2 -> x2y2;\n"
                        "}}\n",
                        FICTION_VERSION, FICTION_REPO);

        compare_dot_layout<gate_layout, gate_layout_hexagonal_drawer<gate_layout, false, false>>(layout, layout_print);
    }
}

TEST_CASE("Draw hexagonal layout blueprints", "[dot-drawers]")
{
    SECTION("odd row")
    {
        using gate_layout =
            gate_level_layout<clocked_layout<tile_based_layout<hexagonal_layout<offset::ucoord_t, odd_row_hex>>>>;

        SECTION("AND-OR Layout")
        {
            const auto layout = blueprints::and_or_gate_layout<gate_layout>();

            static const std::string layout_print = fmt::format(
                "digraph layout {{  // Generated by {} ({})\n"
                "splines=ortho;\n"
                "nodesep=0.25;\n"
                "ranksep=0.125;\n"
                "rankdir=TB;\n"
                "\n"
                "node [fixedsize=true, width=0.5, height=0.5, shape=hexagon, orientation=30, style=filled];\n"
                "x0y0 [label=\"f1\", fillcolor=snow2];\n"
                "x1y0 [label=\"AND\", fillcolor=lightcoral];\n"
                "x2y0 [label=\"x1\", fillcolor=snow2];\n"
                "x3y0 [label=\"\", fillcolor=white];\n"
                "x0y1 [label=\"\", fillcolor=white];\n"
                "x1y1 [label=\"x2\", fillcolor=snow2];\n"
                "x2y1 [label=\"OR\", fillcolor=palegreen2];\n"
                "x3y1 [label=\"f2\", fillcolor=snow2];\n"
                "\n"
                "edge [constraint=false];\n"
                "x2y0 -> x1y0 [style=solid];\n"
                "x1y1 -> x1y0 [style=solid];\n"
                "x1y1 -> x2y1 [style=solid];\n"
                "x2y0 -> x2y1 [style=solid];\n"
                "x1y0 -> x0y0 [style=solid];\n"
                "x2y1 -> x3y1 [style=solid];\n"
                "\n"
                "edge [constraint=true, style=invis];\n"
                "node [label=\"\", width=0.5, height=0.5, style=invis];\n"
                "rank = same {{ x0y0 -> x1y0 -> x2y0 -> x3y0 }};\n"
                "rank = same {{ x0y1 -> x1y1 -> x2y1 -> x3y1 }};\n"
                "rank = same {{ invis1 -> x0y1 }};\n"
                "invis1 -> x0y0;\n"
                "x0y0 -> x0y1;\n"
                "x1y0 -> x0y1;\n"
                "x1y0 -> x1y1;\n"
                "x2y0 -> x1y1;\n"
                "x2y0 -> x2y1;\n"
                "x3y0 -> x2y1;\n"
                "x3y0 -> x3y1;\n"
                "}}\n",
                FICTION_VERSION, FICTION_REPO);

            compare_dot_layout<gate_layout, gate_layout_hexagonal_drawer<gate_layout, false, false>>(layout,
                                                                                                     layout_print);
        }
        SECTION("Crossing Layout")
        {
            const auto layout = blueprints::crossing_layout<gate_layout>();

            static const std::string layout_print = fmt::format(
                "digraph layout {{  // Generated by {} ({})\n"
                "splines=ortho;\n"
                "nodesep=0.25;\n"
                "ranksep=0.125;\n"
                "rankdir=TB;\n"
                "\n"
                "node [fixedsize=true, width=0.5, height=0.5, shape=hexagon, orientation=30, style=filled];\n"
                "x0y0 [label=\"\", fillcolor=white];\n"
                "x1y0 [label=\"x1\", fillcolor=snow2];\n"
                "x2y0 [label=\"x3\", fillcolor=snow2];\n"
                "x3y0 [label=\"\", fillcolor=white];\n"
                "x0y1 [label=\"x2\", fillcolor=snow2];\n"
                "x1y1 [label=\"AND\", fillcolor=lightcoral];\n"
                "x2y1 [label=\"+\", fillcolor=palegoldenrod];\n"
                "x3y1 [label=\"f1\", fillcolor=snow2];\n"
                "x0y2 [label=\"x4\", fillcolor=snow2];\n"
                "x1y2 [label=\"BUF\", fillcolor=palegoldenrod];\n"
                "x2y2 [label=\"AND\", fillcolor=lightcoral];\n"
                "x3y2 [label=\"f2\", fillcolor=snow2];\n"
                "\n"
                "edge [constraint=false];\n"
                "x1y0 -> x1y1 [style=solid];\n"
                "x0y1 -> x1y1 [style=solid];\n"
                "x2y0 -> x2y1 [style=solid];\n"
                "x0y2 -> x1y2 [style=solid];\n"
                "x2y1 -> x2y2 [style=solid];\n"
                "x1y2 -> x2y2 [style=solid];\n"
                "x1y1 -> x2y1 [style=solid];\n"
                "x2y1 -> x3y1 [style=solid];\n"
                "x2y2 -> x3y2 [style=solid];\n"
                "\n"
                "edge [constraint=true, style=invis];\n"
                "node [label=\"\", width=0.5, height=0.5, style=invis];\n"
                "rank = same {{ x0y0 -> x1y0 -> x2y0 -> x3y0 }};\n"
                "rank = same {{ x0y1 -> x1y1 -> x2y1 -> x3y1 }};\n"
                "rank = same {{ x0y2 -> x1y2 -> x2y2 -> x3y2 }};\n"
                "rank = same {{ invis1 -> x0y1 }};\n"
                "invis1 -> x0y0;\n"
                "invis1 -> x0y2;\n"
                "x0y0 -> x0y1;\n"
                "x1y0 -> x0y1;\n"
                "x1y0 -> x1y1;\n"
                "x2y0 -> x1y1;\n"
                "x2y0 -> x2y1;\n"
                "x3y0 -> x2y1;\n"
                "x3y0 -> x3y1;\n"
                "x0y1 -> x0y2;\n"
                "x0y1 -> x1y2;\n"
                "x1y1 -> x1y2;\n"
                "x1y1 -> x2y2;\n"
                "x2y1 -> x2y2;\n"
                "x2y1 -> x3y2;\n"
                "x3y1 -> x3y2;\n"
                "}}\n",
                FICTION_VERSION, FICTION_REPO);

            compare_dot_layout<gate_layout, gate_layout_hexagonal_drawer<gate_layout, false, false>>(layout,
                                                                                                     layout_print);
        }
    }
    SECTION("even row")
    {
        using gate_layout =
            gate_level_layout<clocked_layout<tile_based_layout<hexagonal_layout<offset::ucoord_t, even_row_hex>>>>;

        SECTION("AND-OR Layout")
        {
            const auto layout = blueprints::and_or_gate_layout<gate_layout>();

            static const std::string layout_print = fmt::format(
                "digraph layout {{  // Generated by {} ({})\n"
                "splines=ortho;\n"
                "nodesep=0.25;\n"
                "ranksep=0.125;\n"
                "rankdir=TB;\n"
                "\n"
                "node [fixedsize=true, width=0.5, height=0.5, shape=hexagon, orientation=30, style=filled];\n"
                "x0y0 [label=\"f1\", fillcolor=snow2];\n"
                "x1y0 [label=\"AND\", fillcolor=lightcoral];\n"
                "x2y0 [label=\"x1\", fillcolor=snow2];\n"
                "x3y0 [label=\"\", fillcolor=white];\n"
                "x0y1 [label=\"\", fillcolor=white];\n"
                "x1y1 [label=\"x2\", fillcolor=snow2];\n"
                "x2y1 [label=\"OR\", fillcolor=palegreen2];\n"
                "x3y1 [label=\"f2\", fillcolor=snow2];\n"
                "\n"
                "edge [constraint=false];\n"
                "x2y0 -> x1y0 [style=solid];\n"
                "x1y1 -> x1y0 [style=solid];\n"
                "x1y1 -> x2y1 [style=solid];\n"
                "x2y0 -> x2y1 [style=solid];\n"
                "x1y0 -> x0y0 [style=solid];\n"
                "x2y1 -> x3y1 [style=solid];\n"
                "\n"
                "edge [constraint=true, style=invis];\n"
                "node [label=\"\", width=0.5, height=0.5, style=invis];\n"
                "rank = same {{ x0y0 -> x1y0 -> x2y0 -> x3y0 }};\n"
                "rank = same {{ x0y1 -> x1y1 -> x2y1 -> x3y1 }};\n"
                "rank = same {{ invis0 -> x0y0 }};\n"
                "invis0 -> x0y1;\n"
                "x0y0 -> x0y1;\n"
                "x0y0 -> x1y1;\n"
                "x1y0 -> x1y1;\n"
                "x1y0 -> x2y1;\n"
                "x2y0 -> x2y1;\n"
                "x2y0 -> x3y1;\n"
                "x3y0 -> x3y1;\n"
                "}}\n",
                FICTION_VERSION, FICTION_REPO);

            compare_dot_layout<gate_layout, gate_layout_hexagonal_drawer<gate_layout, false, false>>(layout,
                                                                                                     layout_print);
        }
        SECTION("Crossing Layout")
        {
            const auto layout = blueprints::crossing_layout<gate_layout>();

            static const std::string layout_print = fmt::format(
                "digraph layout {{  // Generated by {} ({})\n"
                "splines=ortho;\n"
                "nodesep=0.25;\n"
                "ranksep=0.125;\n"
                "rankdir=TB;\n"
                "\n"
                "node [fixedsize=true, width=0.5, height=0.5, shape=hexagon, orientation=30, style=filled];\n"
                "x0y0 [label=\"\", fillcolor=white];\n"
                "x1y0 [label=\"x1\", fillcolor=snow2];\n"
                "x2y0 [label=\"x3\", fillcolor=snow2];\n"
                "x3y0 [label=\"\", fillcolor=white];\n"
                "x0y1 [label=\"x2\", fillcolor=snow2];\n"
                "x1y1 [label=\"AND\", fillcolor=lightcoral];\n"
                "x2y1 [label=\"+\", fillcolor=palegoldenrod];\n"
                "x3y1 [label=\"f1\", fillcolor=snow2];\n"
                "x0y2 [label=\"x4\", fillcolor=snow2];\n"
                "x1y2 [label=\"BUF\", fillcolor=palegoldenrod];\n"
                "x2y2 [label=\"AND\", fillcolor=lightcoral];\n"
                "x3y2 [label=\"f2\", fillcolor=snow2];\n"
                "\n"
                "edge [constraint=false];\n"
                "x1y0 -> x1y1 [style=solid];\n"
                "x0y1 -> x1y1 [style=solid];\n"
                "x2y0 -> x2y1 [style=solid];\n"
                "x0y2 -> x1y2 [style=solid];\n"
                "x2y1 -> x2y2 [style=solid];\n"
                "x1y2 -> x2y2 [style=solid];\n"
                "x1y1 -> x2y1 [style=solid];\n"
                "x2y1 -> x3y1 [style=solid];\n"
                "x2y2 -> x3y2 [style=solid];\n"
                "\n"
                "edge [constraint=true, style=invis];\n"
                "node [label=\"\", width=0.5, height=0.5, style=invis];\n"
                "rank = same {{ x0y0 -> x1y0 -> x2y0 -> x3y0 }};\n"
                "rank = same {{ x0y1 -> x1y1 -> x2y1 -> x3y1 }};\n"
                "rank = same {{ x0y2 -> x1y2 -> x2y2 -> x3y2 }};\n"
                "rank = same {{ invis0 -> x0y0 }};\n"
                "invis0 -> x0y1;\n"
                "rank = same {{ invis2 -> x0y2 }};\n"
                "invis2 -> x0y1;\n"
                "x0y0 -> x0y1;\n"
                "x0y0 -> x1y1;\n"
                "x1y0 -> x1y1;\n"
                "x1y0 -> x2y1;\n"
                "x2y0 -> x2y1;\n"
                "x2y0 -> x3y1;\n"
                "x3y0 -> x3y1;\n"
                "x0y1 -> x0y2;\n"
                "x1y1 -> x0y2;\n"
                "x1y1 -> x1y2;\n"
                "x2y1 -> x1y2;\n"
                "x2y1 -> x2y2;\n"
                "x3y1 -> x2y2;\n"
                "x3y1 -> x3y2;\n"
                "}}\n",
                FICTION_VERSION, FICTION_REPO);

            compare_dot_layout<gate_layout, gate_layout_hexagonal_drawer<gate_layout, false, false>>(layout,
                                                                                                     layout_print);
        }
    }
    SECTION("odd column")
    {
        using gate_layout =
            gate_level_layout<clocked_layout<tile_based_layout<hexagonal_layout<offset::ucoord_t, odd_column_hex>>>>;

        SECTION("AND-OR Layout")
        {
            const auto layout = blueprints::and_or_gate_layout<gate_layout>();

            static const std::string layout_print =
                fmt::format("digraph layout {{  // Generated by {} ({})\n"
                            "splines=ortho;\n"
                            "nodesep=0.25;\n"
                            "ranksep=0.125;\n"
                            "rankdir=LR;\n"
                            "\n"
                            "node [fixedsize=true, width=0.5, height=0.5, shape=hexagon, style=filled];\n"
                            "x0y0 [label=\"f1\", fillcolor=snow2];\n"
                            "x1y0 [label=\"AND\", fillcolor=lightcoral];\n"
                            "x2y0 [label=\"x1\", fillcolor=snow2];\n"
                            "x3y0 [label=\"\", fillcolor=white];\n"
                            "x0y1 [label=\"\", fillcolor=white];\n"
                            "x1y1 [label=\"x2\", fillcolor=snow2];\n"
                            "x2y1 [label=\"OR\", fillcolor=palegreen2];\n"
                            "x3y1 [label=\"f2\", fillcolor=snow2];\n"
                            "\n"
                            "edge [constraint=false];\n"
                            "x2y0 -> x1y0 [style=solid];\n"
                            "x1y1 -> x1y0 [style=solid];\n"
                            "x1y1 -> x2y1 [style=solid];\n"
                            "x2y0 -> x2y1 [style=solid];\n"
                            "x1y0 -> x0y0 [style=solid];\n"
                            "x2y1 -> x3y1 [style=solid];\n"
                            "\n"
                            "edge [constraint=true, style=invis];\n"
                            "node [label=\"\", width=0.5, height=0.5, style=invis];\n"
                            "rank = same {{ x0y0 -> x0y1 }};\n"
                            "rank = same {{ x1y0 -> x1y1 }};\n"
                            "rank = same {{ x2y0 -> x2y1 }};\n"
                            "rank = same {{ x3y0 -> x3y1 }};\n"
                            "rank = same {{ invis1 -> x1y0 }};\n"
                            "invis1 -> x0y0;\n"
                            "invis1 -> x2y0;\n"
                            "rank = same {{ invis3 -> x3y0 }};\n"
                            "invis3 -> x2y0;\n"
                            "x0y0 -> x1y0;\n"
                            "x1y0 -> x2y1;\n"
                            "x1y0 -> x2y0;\n"
                            "x1y0 -> x0y1;\n"
                            "x2y0 -> x3y0;\n"
                            "x3y0 -> x2y1;\n"
                            "x0y1 -> x1y1;\n"
                            "x1y1 -> x2y1;\n"
                            "x2y1 -> x3y1;\n"
                            "}}\n",
                            FICTION_VERSION, FICTION_REPO);

            compare_dot_layout<gate_layout, gate_layout_hexagonal_drawer<gate_layout, false, false>>(layout,
                                                                                                     layout_print);
        }
        SECTION("Crossing Layout")
        {
            const auto layout = blueprints::crossing_layout<gate_layout>();

            static const std::string layout_print =
                fmt::format("digraph layout {{  // Generated by {} ({})\n"
                            "splines=ortho;\n"
                            "nodesep=0.25;\n"
                            "ranksep=0.125;\n"
                            "rankdir=LR;\n"
                            "\n"
                            "node [fixedsize=true, width=0.5, height=0.5, shape=hexagon, style=filled];\n"
                            "x0y0 [label=\"\", fillcolor=white];\n"
                            "x1y0 [label=\"x1\", fillcolor=snow2];\n"
                            "x2y0 [label=\"x3\", fillcolor=snow2];\n"
                            "x3y0 [label=\"\", fillcolor=white];\n"
                            "x0y1 [label=\"x2\", fillcolor=snow2];\n"
                            "x1y1 [label=\"AND\", fillcolor=lightcoral];\n"
                            "x2y1 [label=\"+\", fillcolor=palegoldenrod];\n"
                            "x3y1 [label=\"f1\", fillcolor=snow2];\n"
                            "x0y2 [label=\"x4\", fillcolor=snow2];\n"
                            "x1y2 [label=\"BUF\", fillcolor=palegoldenrod];\n"
                            "x2y2 [label=\"AND\", fillcolor=lightcoral];\n"
                            "x3y2 [label=\"f2\", fillcolor=snow2];\n"
                            "\n"
                            "edge [constraint=false];\n"
                            "x1y0 -> x1y1 [style=solid];\n"
                            "x0y1 -> x1y1 [style=solid];\n"
                            "x2y0 -> x2y1 [style=solid];\n"
                            "x0y2 -> x1y2 [style=solid];\n"
                            "x2y1 -> x2y2 [style=solid];\n"
                            "x1y2 -> x2y2 [style=solid];\n"
                            "x1y1 -> x2y1 [style=solid];\n"
                            "x2y1 -> x3y1 [style=solid];\n"
                            "x2y2 -> x3y2 [style=solid];\n"
                            "\n"
                            "edge [constraint=true, style=invis];\n"
                            "node [label=\"\", width=0.5, height=0.5, style=invis];\n"
                            "rank = same {{ x0y0 -> x0y1 -> x0y2 }};\n"
                            "rank = same {{ x1y0 -> x1y1 -> x1y2 }};\n"
                            "rank = same {{ x2y0 -> x2y1 -> x2y2 }};\n"
                            "rank = same {{ x3y0 -> x3y1 -> x3y2 }};\n"
                            "rank = same {{ invis1 -> x1y0 }};\n"
                            "invis1 -> x0y0;\n"
                            "invis1 -> x2y0;\n"
                            "rank = same {{ invis3 -> x3y0 }};\n"
                            "invis3 -> x2y0;\n"
                            "x0y0 -> x1y0;\n"
                            "x1y0 -> x2y1;\n"
                            "x1y0 -> x2y0;\n"
                            "x1y0 -> x0y1;\n"
                            "x2y0 -> x3y0;\n"
                            "x3y0 -> x2y1;\n"
                            "x0y1 -> x1y1;\n"
                            "x1y1 -> x2y2;\n"
                            "x1y1 -> x2y1;\n"
                            "x1y1 -> x0y2;\n"
                            "x2y1 -> x3y1;\n"
                            "x3y1 -> x2y2;\n"
                            "x0y2 -> x1y2;\n"
                            "x1y2 -> x2y2;\n"
                            "x2y2 -> x3y2;\n"
                            "}}\n",
                            FICTION_VERSION, FICTION_REPO);

            compare_dot_layout<gate_layout, gate_layout_hexagonal_drawer<gate_layout, false, false>>(layout,
                                                                                                     layout_print);
        }
    }
    SECTION("even column")
    {
        using gate_layout =
            gate_level_layout<clocked_layout<tile_based_layout<hexagonal_layout<offset::ucoord_t, even_column_hex>>>>;

        SECTION("AND-OR Layout")
        {
            const auto layout = blueprints::and_or_gate_layout<gate_layout>();

            static const std::string layout_print =
                fmt::format("digraph layout {{  // Generated by {} ({})\n"
                            "splines=ortho;\n"
                            "nodesep=0.25;\n"
                            "ranksep=0.125;\n"
                            "rankdir=LR;\n"
                            "\n"
                            "node [fixedsize=true, width=0.5, height=0.5, shape=hexagon, style=filled];\n"
                            "x0y0 [label=\"f1\", fillcolor=snow2];\n"
                            "x1y0 [label=\"AND\", fillcolor=lightcoral];\n"
                            "x2y0 [label=\"x1\", fillcolor=snow2];\n"
                            "x3y0 [label=\"\", fillcolor=white];\n"
                            "x0y1 [label=\"\", fillcolor=white];\n"
                            "x1y1 [label=\"x2\", fillcolor=snow2];\n"
                            "x2y1 [label=\"OR\", fillcolor=palegreen2];\n"
                            "x3y1 [label=\"f2\", fillcolor=snow2];\n"
                            "\n"
                            "edge [constraint=false];\n"
                            "x2y0 -> x1y0 [style=solid];\n"
                            "x1y1 -> x1y0 [style=solid];\n"
                            "x1y1 -> x2y1 [style=solid];\n"
                            "x2y0 -> x2y1 [style=solid];\n"
                            "x1y0 -> x0y0 [style=solid];\n"
                            "x2y1 -> x3y1 [style=solid];\n"
                            "\n"
                            "edge [constraint=true, style=invis];\n"
                            "node [label=\"\", width=0.5, height=0.5, style=invis];\n"
                            "rank = same {{ x0y0 -> x0y1 }};\n"
                            "rank = same {{ x1y0 -> x1y1 }};\n"
                            "rank = same {{ x2y0 -> x2y1 }};\n"
                            "rank = same {{ x3y0 -> x3y1 }};\n"
                            "rank = same {{ invis0 -> x0y0 }};\n"
                            "invis0 -> x1y0;\n"
                            "rank = same {{ invis2 -> x2y0 }};\n"
                            "invis2 -> x1y0;\n"
                            "invis2 -> x3y0;\n"
                            "x0y0 -> x1y1;\n"
                            "x0y0 -> x1y0;\n"
                            "x1y0 -> x2y0;\n"
                            "x2y0 -> x3y1;\n"
                            "x2y0 -> x3y0;\n"
                            "x2y0 -> x1y1;\n"
                            "x0y1 -> x1y1;\n"
                            "x1y1 -> x2y1;\n"
                            "x2y1 -> x3y1;\n"
                            "}}\n",
                            FICTION_VERSION, FICTION_REPO);

            compare_dot_layout<gate_layout, gate_layout_hexagonal_drawer<gate_layout, false, false>>(layout,
                                                                                                     layout_print);
        }
        SECTION("Crossing Layout")
        {
            const auto layout = blueprints::crossing_layout<gate_layout>();

            static const std::string layout_print =
                fmt::format("digraph layout {{  // Generated by {} ({})\n"
                            "splines=ortho;\n"
                            "nodesep=0.25;\n"
                            "ranksep=0.125;\n"
                            "rankdir=LR;\n"
                            "\n"
                            "node [fixedsize=true, width=0.5, height=0.5, shape=hexagon, style=filled];\n"
                            "x0y0 [label=\"\", fillcolor=white];\n"
                            "x1y0 [label=\"x1\", fillcolor=snow2];\n"
                            "x2y0 [label=\"x3\", fillcolor=snow2];\n"
                            "x3y0 [label=\"\", fillcolor=white];\n"
                            "x0y1 [label=\"x2\", fillcolor=snow2];\n"
                            "x1y1 [label=\"AND\", fillcolor=lightcoral];\n"
                            "x2y1 [label=\"+\", fillcolor=palegoldenrod];\n"
                            "x3y1 [label=\"f1\", fillcolor=snow2];\n"
                            "x0y2 [label=\"x4\", fillcolor=snow2];\n"
                            "x1y2 [label=\"BUF\", fillcolor=palegoldenrod];\n"
                            "x2y2 [label=\"AND\", fillcolor=lightcoral];\n"
                            "x3y2 [label=\"f2\", fillcolor=snow2];\n"
                            "\n"
                            "edge [constraint=false];\n"
                            "x1y0 -> x1y1 [style=solid];\n"
                            "x0y1 -> x1y1 [style=solid];\n"
                            "x2y0 -> x2y1 [style=solid];\n"
                            "x0y2 -> x1y2 [style=solid];\n"
                            "x2y1 -> x2y2 [style=solid];\n"
                            "x1y2 -> x2y2 [style=solid];\n"
                            "x1y1 -> x2y1 [style=solid];\n"
                            "x2y1 -> x3y1 [style=solid];\n"
                            "x2y2 -> x3y2 [style=solid];\n"
                            "\n"
                            "edge [constraint=true, style=invis];\n"
                            "node [label=\"\", width=0.5, height=0.5, style=invis];\n"
                            "rank = same {{ x0y0 -> x0y1 -> x0y2 }};\n"
                            "rank = same {{ x1y0 -> x1y1 -> x1y2 }};\n"
                            "rank = same {{ x2y0 -> x2y1 -> x2y2 }};\n"
                            "rank = same {{ x3y0 -> x3y1 -> x3y2 }};\n"
                            "rank = same {{ invis0 -> x0y0 }};\n"
                            "invis0 -> x1y0;\n"
                            "rank = same {{ invis2 -> x2y0 }};\n"
                            "invis2 -> x1y0;\n"
                            "invis2 -> x3y0;\n"
                            "x0y0 -> x1y1;\n"
                            "x0y0 -> x1y0;\n"
                            "x1y0 -> x2y0;\n"
                            "x2y0 -> x3y1;\n"
                            "x2y0 -> x3y0;\n"
                            "x2y0 -> x1y1;\n"
                            "x0y1 -> x1y2;\n"
                            "x0y1 -> x1y1;\n"
                            "x1y1 -> x2y1;\n"
                            "x2y1 -> x3y2;\n"
                            "x2y1 -> x3y1;\n"
                            "x2y1 -> x1y2;\n"
                            "x0y2 -> x1y2;\n"
                            "x1y2 -> x2y2;\n"
                            "x2y2 -> x3y2;\n"
                            "}}\n",
                            FICTION_VERSION, FICTION_REPO);

            compare_dot_layout<gate_layout, gate_layout_hexagonal_drawer<gate_layout, false, false>>(layout,
                                                                                                     layout_print);
        }
    }
}
