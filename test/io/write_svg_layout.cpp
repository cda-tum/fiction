//
// Created by Jan Drewniok on 05.11.24.
//

#include <catch2/catch_template_test_macros.hpp>
#include <catch2/catch_test_macros.hpp>

#include "utils/version_info.hpp"

#include <fiction/io/write_svg_layout.hpp>
#include <fiction/technology/cell_technologies.hpp>
#include <fiction/technology/charge_distribution_surface.hpp>
#include <fiction/technology/sidb_charge_state.hpp>
#include <fiction/types.hpp>

#include <fmt/format.h>

#include <algorithm>
#include <cctype>
#include <sstream>
#include <string>

using namespace fiction;

/**
 * This function takes an SVG string as input and returns a new string with all
 * whitespace characters removed. The purpose is to create a compact representation
 * of the SVG content, which can be useful for comparisons, optimizations, or transmission.
 *
 * @param svg The input SVG string to be normalized.
 * @return A string with all whitespace characters removed.
 */
[[nodiscard]] static std::string normalize_svg(const std::string& svg) noexcept
{
    std::string result = svg;

    // Remove all whitespace (spaces, tabs, newlines)
    result.erase(std::remove_if(result.begin(), result.end(), ::isspace), result.end());

    return result;
};

inline const std::string EXPECTED_SVG_LIGHT_CELL_LEVEL =
    fmt::format(R"(<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Generated by {} ({}) -->
<svg
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:cc="http://creativecommons.org/ns#"
    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
    xmlns:svg="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 19.2 23.04"
    version="1.1">
    <metadata>
        <rdf:RDF>
            <cc:Work rdf:about="">
                <dc:format>image/svg+xml</dc:format>
                <dc:type rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
                <dc:title></dc:title>
            </cc:Work>
        </rdf:RDF>
    </metadata>

<defs>
    <!-- lattice point -->
    <circle id="lattice_point" cx="0" cy="0" r="0.3"/>
    <!-- SiDB -->
    <circle id="sidb_color" cx="0" cy="0" r="0.9"/>
</defs>
 <!-- PATH_DEFINITION placeholder -->
    <rect x="0" y="0" width="19.2" height="23.04" style="fill:#ffffff;"/> <!-- Background rectangle placeholder -->
    <g>
        <use xlink:href="#lattice_point" x="3.84" y="7.68" style="fill:#6e7175;"/><use xlink:href="#lattice_point" x="7.68" y="7.68" style="fill:#6e7175;"/><use xlink:href="#lattice_point" x="11.52" y="7.68" style="fill:#6e7175;"/><use xlink:href="#lattice_point" x="15.36" y="7.68" style="fill:#6e7175;"/><use xlink:href="#lattice_point" x="3.84" y="9.93" style="fill:#6e7175;"/><use xlink:href="#lattice_point" x="7.68" y="9.93" style="fill:#6e7175;"/><use xlink:href="#lattice_point" x="11.52" y="9.93" style="fill:#6e7175;"/><use xlink:href="#lattice_point" x="15.36" y="9.93" style="fill:#6e7175;"/><use xlink:href="#lattice_point" x="3.84" y="15.36" style="fill:#6e7175;"/><use xlink:href="#lattice_point" x="7.68" y="15.36" style="fill:#6e7175;"/><use xlink:href="#lattice_point" x="11.52" y="15.36" style="fill:#6e7175;"/><use xlink:href="#lattice_point" x="15.36" y="15.36" style="fill:#6e7175;"/><use xlink:href="#lattice_point" x="3.84" y="17.61" style="fill:#6e7175;"/><use xlink:href="#lattice_point" x="7.68" y="17.61" style="fill:#6e7175;"/><use xlink:href="#lattice_point" x="11.52" y="17.61" style="fill:#6e7175;"/><use xlink:href="#lattice_point" x="15.36" y="17.61" style="fill:#6e7175;"/><use xlink:href="#sidb_color" x="3.84" y="7.68" style="fill:#ffffff; fill-opacity:1; stroke:#C8C8C8; stroke-width:0.3;"/><use xlink:href="#sidb_color" x="7.68" y="7.68" style="fill:#ffffff; fill-opacity:1; stroke:#C8C8C8; stroke-width:0.3;"/><use xlink:href="#sidb_color" x="7.68" y="9.93" style="fill:#ffffff; fill-opacity:1; stroke:#C8C8C8; stroke-width:0.3;"/><use xlink:href="#sidb_color" x="15.36" y="17.61" style="fill:#ffffff; fill-opacity:1; stroke:#C8C8C8; stroke-width:0.3;"/> <!-- SVG content placeholder -->
    </g>
</svg>)",
                FICTION_VERSION, FICTION_REPO);

inline const std::string EXPECTED_SVG_LIGHT_CELL_LEVEL_111 =
    fmt::format(R"(<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Generated by {} ({}) -->
<svg
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:cc="http://creativecommons.org/ns#"
    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
    xmlns:svg="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 33.25 11.52"
    version="1.1">
    <metadata>
        <rdf:RDF>
            <cc:Work rdf:about="">
                <dc:format>image/svg+xml</dc:format>
                <dc:type rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
                <dc:title></dc:title>
            </cc:Work>
        </rdf:RDF>
    </metadata>

<defs>
    <!-- lattice point -->
    <circle id="lattice_point" cx="0" cy="0" r="0.3"/>
    <!-- SiDB -->
    <circle id="sidb_color" cx="0" cy="0" r="0.9"/>
</defs>
 <!-- PATH_DEFINITION placeholder -->
    <rect x="0" y="0" width="33.25" height="11.52" style="fill:#ffffff;"/> <!-- Background rectangle placeholder -->
    <g>
        <use xlink:href="#lattice_point" x="6.65" y="3.84" style="fill:#6e7175;"/><use xlink:href="#lattice_point" x="13.3" y="3.84" style="fill:#6e7175;"/><use xlink:href="#lattice_point" x="19.950000000000003" y="3.84" style="fill:#6e7175;"/><use xlink:href="#lattice_point" x="26.6" y="3.84" style="fill:#6e7175;"/><use xlink:href="#lattice_point" x="9.9755" y="5.76" style="fill:#6e7175;"/><use xlink:href="#lattice_point" x="16.625500000000002" y="5.76" style="fill:#6e7175;"/><use xlink:href="#lattice_point" x="23.2755" y="5.76" style="fill:#6e7175;"/><use xlink:href="#lattice_point" x="29.9255" y="5.76" style="fill:#6e7175;"/><use xlink:href="#lattice_point" x="6.65" y="7.68" style="fill:#6e7175;"/><use xlink:href="#lattice_point" x="13.3" y="7.68" style="fill:#6e7175;"/><use xlink:href="#lattice_point" x="19.950000000000003" y="7.68" style="fill:#6e7175;"/><use xlink:href="#lattice_point" x="26.6" y="7.68" style="fill:#6e7175;"/><use xlink:href="#lattice_point" x="9.9755" y="9.6" style="fill:#6e7175;"/><use xlink:href="#lattice_point" x="16.625500000000002" y="9.6" style="fill:#6e7175;"/><use xlink:href="#lattice_point" x="23.2755" y="9.6" style="fill:#6e7175;"/><use xlink:href="#lattice_point" x="29.9255" y="9.6" style="fill:#6e7175;"/><use xlink:href="#sidb_color" x="6.65" y="3.84" style="fill:#ffffff; fill-opacity:1; stroke:#C8C8C8; stroke-width:0.3;"/><use xlink:href="#sidb_color" x="13.3" y="3.84" style="fill:#ffffff; fill-opacity:1; stroke:#C8C8C8; stroke-width:0.3;"/><use xlink:href="#sidb_color" x="16.625500000000002" y="5.76" style="fill:#ffffff; fill-opacity:1; stroke:#C8C8C8; stroke-width:0.3;"/><use xlink:href="#sidb_color" x="29.9255" y="9.6" style="fill:#ffffff; fill-opacity:1; stroke:#C8C8C8; stroke-width:0.3;"/> <!-- SVG content placeholder -->
    </g>
</svg>)",
                FICTION_VERSION, FICTION_REPO);

inline const std::string EXPECTED_SVG_DARK_CELL_LEVEL =
    fmt::format(R"(<?xml version="1.0" encoding="UTF-8" standalone="no"?>
            <!-- Generated by {} ({}) -->
            <svg
                xmlns:dc="http://purl.org/dc/elements/1.1/"
                xmlns:cc="http://creativecommons.org/ns#"
                xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
                xmlns:svg="http://www.w3.org/2000/svg"
                xmlns:xlink="http://www.w3.org/1999/xlink"
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 19.2 23.04"
                version="1.1">
                <metadata>
                    <rdf:RDF>
                        <cc:Work rdf:about="">
                            <dc:format>image/svg+xml</dc:format>
                            <dc:type rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
                            <dc:title></dc:title>
                        </cc:Work>
                    </rdf:RDF>
                </metadata>

            <defs>
                <!-- lattice point -->
                <circle id="lattice_point" cx="0" cy="0" r="0.3"/>
                <!-- SiDB -->
                <circle id="sidb_color" cx="0" cy="0" r="0.9"/>
            </defs>
             <!-- PATH_DEFINITION placeholder -->
                <rect x="0" y="0" width="19.2" height="23.04" style="fill:#25323D;"/> <!-- Background rectangle placeholder -->
                <g>
                    <use xlink:href="#lattice_point" x="3.84" y="7.68" style="fill:#6e7175;"/>
            <use xlink:href="#lattice_point" x="7.68" y="7.68" style="fill:#6e7175;"/>
            <use xlink:href="#lattice_point" x="11.52" y="7.68" style="fill:#6e7175;"/>
            <use xlink:href="#lattice_point" x="15.36" y="7.68" style="fill:#6e7175;"/>
            <use xlink:href="#lattice_point" x="3.84" y="9.93" style="fill:#6e7175;"/>
            <use xlink:href="#lattice_point" x="7.68" y="9.93" style="fill:#6e7175;"/>
            <use xlink:href="#lattice_point" x="11.52" y="9.93" style="fill:#6e7175;"/>
            <use xlink:href="#lattice_point" x="15.36" y="9.93" style="fill:#6e7175;"/>
            <use xlink:href="#lattice_point" x="3.84" y="15.36" style="fill:#6e7175;"/>
            <use xlink:href="#lattice_point" x="7.68" y="15.36" style="fill:#6e7175;"/>
            <use xlink:href="#lattice_point" x="11.52" y="15.36" style="fill:#6e7175;"/>
            <use xlink:href="#lattice_point" x="15.36" y="15.36" style="fill:#6e7175;"/>
            <use xlink:href="#lattice_point" x="3.84" y="17.61" style="fill:#6e7175;"/>
            <use xlink:href="#lattice_point" x="7.68" y="17.61" style="fill:#6e7175;"/>
            <use xlink:href="#lattice_point" x="11.52" y="17.61" style="fill:#6e7175;"/>
            <use xlink:href="#lattice_point" x="15.36" y="17.61" style="fill:#6e7175;"/>
            <use xlink:href="#sidb_color" x="3.84" y="7.68" style="fill:#C8C8C8; fill-opacity:1; stroke:#ffffff; stroke-width:0.3;"/>
            <use xlink:href="#sidb_color" x="7.68" y="7.68" style="fill:#C8C8C8; fill-opacity:1; stroke:#ffffff; stroke-width:0.3;"/>
            <use xlink:href="#sidb_color" x="7.68" y="9.93" style="fill:#C8C8C8; fill-opacity:1; stroke:#ffffff; stroke-width:0.3;"/>
            <use xlink:href="#sidb_color" x="15.36" y="17.61" style="fill:#C8C8C8; fill-opacity:1; stroke:#ffffff; stroke-width:0.3;"/> <!-- SVG content placeholder -->
                </g>
            </svg>)",
                FICTION_VERSION, FICTION_REPO);

inline const std::string EXPECTED_SVG_DARK_CELL_LEVEL_HIDE_LATTICE =
    fmt::format(R"(<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Generated by {} ({}) -->
<svg
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:cc="http://creativecommons.org/ns#"
    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
    xmlns:svg="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 19.2 23.04"
    version="1.1">
    <metadata>
        <rdf:RDF>
            <cc:Work rdf:about="">
                <dc:format>image/svg+xml</dc:format>
                <dc:type rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
                <dc:title></dc:title>
            </cc:Work>
        </rdf:RDF>
    </metadata>

<defs>
    <!-- lattice point -->
    <circle id="lattice_point" cx="0" cy="0" r="0.3"/>
    <!-- SiDB -->
    <circle id="sidb_color" cx="0" cy="0" r="0.9"/>
</defs>
 <!-- PATH_DEFINITION placeholder -->
    <rect x="0" y="0" width="19.2" height="23.04" style="fill:#25323D;"/> <!-- Background rectangle placeholder -->
    <g>
        <use xlink:href="#sidb_color" x="3.84" y="7.68" style="fill:#C8C8C8; fill-opacity:1; stroke:#ffffff; stroke-width:0.3;"/>
        <use xlink:href="#sidb_color" x="7.68" y="7.68" style="fill:#C8C8C8; fill-opacity:1; stroke:#ffffff; stroke-width:0.3;"/>
        <use xlink:href="#sidb_color" x="7.68" y="9.93" style="fill:#C8C8C8; fill-opacity:1; stroke:#ffffff; stroke-width:0.3;"/>
        <use xlink:href="#sidb_color" x="15.36" y="17.61" style="fill:#C8C8C8; fill-opacity:1; stroke:#ffffff; stroke-width:0.3;"/>
        <!-- SVG content placeholder -->
    </g>
</svg>
)",
                FICTION_VERSION, FICTION_REPO);

inline const std::string EXPECTED_SVG_DARK_CELL_LEVEL_111 =
    fmt::format(R"(<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Generated by {} ({}) -->
<svg
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:cc="http://creativecommons.org/ns#"
    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
    xmlns:svg="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 33.25 11.52"
    version="1.1">
    <metadata>
        <rdf:RDF>
            <cc:Work rdf:about="">
                <dc:format>image/svg+xml</dc:format>
                <dc:type rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
                <dc:title></dc:title>
            </cc:Work>
        </rdf:RDF>
    </metadata>

<defs>
    <!-- lattice point -->
    <circle id="lattice_point" cx="0" cy="0" r="0.3"/>
    <!-- SiDB -->
    <circle id="sidb_color" cx="0" cy="0" r="0.9"/>
</defs>
 <!-- PATH_DEFINITION placeholder -->
    <rect x="0" y="0" width="33.25" height="11.52" style="fill:#25323D;"/> <!-- Background rectangle placeholder -->
    <g>
        <use xlink:href="#lattice_point" x="6.65" y="3.84" style="fill:#6e7175;"/><use xlink:href="#lattice_point" x="13.3" y="3.84" style="fill:#6e7175;"/><use xlink:href="#lattice_point" x="19.950000000000003" y="3.84" style="fill:#6e7175;"/><use xlink:href="#lattice_point" x="26.6" y="3.84" style="fill:#6e7175;"/><use xlink:href="#lattice_point" x="9.9755" y="5.76" style="fill:#6e7175;"/><use xlink:href="#lattice_point" x="16.625500000000002" y="5.76" style="fill:#6e7175;"/><use xlink:href="#lattice_point" x="23.2755" y="5.76" style="fill:#6e7175;"/><use xlink:href="#lattice_point" x="29.9255" y="5.76" style="fill:#6e7175;"/><use xlink:href="#lattice_point" x="6.65" y="7.68" style="fill:#6e7175;"/><use xlink:href="#lattice_point" x="13.3" y="7.68" style="fill:#6e7175;"/><use xlink:href="#lattice_point" x="19.950000000000003" y="7.68" style="fill:#6e7175;"/><use xlink:href="#lattice_point" x="26.6" y="7.68" style="fill:#6e7175;"/><use xlink:href="#lattice_point" x="9.9755" y="9.6" style="fill:#6e7175;"/><use xlink:href="#lattice_point" x="16.625500000000002" y="9.6" style="fill:#6e7175;"/><use xlink:href="#lattice_point" x="23.2755" y="9.6" style="fill:#6e7175;"/><use xlink:href="#lattice_point" x="29.9255" y="9.6" style="fill:#6e7175;"/><use xlink:href="#sidb_color" x="6.65" y="3.84" style="fill:#C8C8C8; fill-opacity:1; stroke:#ffffff; stroke-width:0.3;"/><use xlink:href="#sidb_color" x="13.3" y="3.84" style="fill:#C8C8C8; fill-opacity:1; stroke:#ffffff; stroke-width:0.3;"/><use xlink:href="#sidb_color" x="16.625500000000002" y="5.76" style="fill:#C8C8C8; fill-opacity:1; stroke:#ffffff; stroke-width:0.3;"/><use xlink:href="#sidb_color" x="29.9255" y="9.6" style="fill:#C8C8C8; fill-opacity:1; stroke:#ffffff; stroke-width:0.3;"/> <!-- SVG content placeholder -->
    </g>
</svg>)",
                FICTION_VERSION, FICTION_REPO);

inline const std::string EXPECTED_SVG_LIGHT_CHARGE_DISTRIBUTION =
    fmt::format(R"(<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Generated by {} ({}) -->
<svg
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:cc="http://creativecommons.org/ns#"
    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
    xmlns:svg="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 19.2 23.04"
    version="1.1">
    <metadata>
        <rdf:RDF>
            <cc:Work rdf:about="">
                <dc:format>image/svg+xml</dc:format>
                <dc:type rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
                <dc:title></dc:title>
            </cc:Work>
        </rdf:RDF>
    </metadata>

<defs>
    <!-- lattice point -->
    <circle id="lattice_point" cx="0" cy="0" r="0.3"/>
    <!-- SiDB -->
    <circle id="sidb_color" cx="0" cy="0" r="0.9"/>
</defs>
 <!-- PATH_DEFINITION placeholder -->
    <rect x="0" y="0" width="19.2" height="23.04" style="fill:#ffffff;"/> <!-- Background rectangle placeholder -->
    <g>
        <use xlink:href="#lattice_point" x="3.84" y="7.68" style="fill:#6e7175;"/>
<use xlink:href="#lattice_point" x="7.68" y="7.68" style="fill:#6e7175;"/>
<use xlink:href="#lattice_point" x="11.52" y="7.68" style="fill:#6e7175;"/>
<use xlink:href="#lattice_point" x="15.36" y="7.68" style="fill:#6e7175;"/>
<use xlink:href="#lattice_point" x="3.84" y="9.93" style="fill:#6e7175;"/>
<use xlink:href="#lattice_point" x="7.68" y="9.93" style="fill:#6e7175;"/>
<use xlink:href="#lattice_point" x="11.52" y="9.93" style="fill:#6e7175;"/>
<use xlink:href="#lattice_point" x="15.36" y="9.93" style="fill:#6e7175;"/>
<use xlink:href="#lattice_point" x="3.84" y="15.36" style="fill:#6e7175;"/>
<use xlink:href="#lattice_point" x="7.68" y="15.36" style="fill:#6e7175;"/>
<use xlink:href="#lattice_point" x="11.52" y="15.36" style="fill:#6e7175;"/>
<use xlink:href="#lattice_point" x="15.36" y="15.36" style="fill:#6e7175;"/>
<use xlink:href="#lattice_point" x="3.84" y="17.61" style="fill:#6e7175;"/>
<use xlink:href="#lattice_point" x="7.68" y="17.61" style="fill:#6e7175;"/>
<use xlink:href="#lattice_point" x="11.52" y="17.61" style="fill:#6e7175;"/>
<use xlink:href="#lattice_point" x="15.36" y="17.61" style="fill:#6e7175;"/>
<use xlink:href="#sidb_color" x="3.84" y="7.68" style="fill:#E34857; fill-opacity:1; stroke:#E34857; stroke-width:0.3;"/>
<use xlink:href="#sidb_color" x="7.68" y="7.68" style="fill:#ffffff; fill-opacity:0; stroke:#C8C8C8; stroke-width:0.3;"/>
<use xlink:href="#sidb_color" x="7.68" y="9.93" style="fill:#00ADAE; fill-opacity:1; stroke:#00ADAE; stroke-width:0.3;"/>
<use xlink:href="#sidb_color" x="15.36" y="17.61" style="fill:#ffffff; fill-opacity:0; stroke:#C8C8C8; stroke-width:0.3;"/> <!-- SVG content placeholder -->
    </g>
</svg>)",
                FICTION_VERSION, FICTION_REPO);

inline const std::string EXPECTED_SVG_DARK_CHARGE_DISTRIBUTION =
    fmt::format(R"(<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Generated by {} ({}) -->
<svg
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:cc="http://creativecommons.org/ns#"
    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
    xmlns:svg="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 19.2 23.04"
    version="1.1">
    <metadata>
        <rdf:RDF>
            <cc:Work rdf:about="">
                <dc:format>image/svg+xml</dc:format>
                <dc:type rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
                <dc:title></dc:title>
            </cc:Work>
        </rdf:RDF>
    </metadata>

<defs>
    <!-- lattice point -->
    <circle id="lattice_point" cx="0" cy="0" r="0.3"/>
    <!-- SiDB -->
    <circle id="sidb_color" cx="0" cy="0" r="0.9"/>
</defs>
 <!-- PATH_DEFINITION placeholder -->
    <rect x="0" y="0" width="19.2" height="23.04" style="fill:#25323D;"/> <!-- Background rectangle placeholder -->
    <g>
        <use xlink:href="#lattice_point" x="3.84" y="7.68" style="fill:#6e7175;"/>
<use xlink:href="#lattice_point" x="7.68" y="7.68" style="fill:#6e7175;"/>
<use xlink:href="#lattice_point" x="11.52" y="7.68" style="fill:#6e7175;"/>
<use xlink:href="#lattice_point" x="15.36" y="7.68" style="fill:#6e7175;"/>
<use xlink:href="#lattice_point" x="3.84" y="9.93" style="fill:#6e7175;"/>
<use xlink:href="#lattice_point" x="7.68" y="9.93" style="fill:#6e7175;"/>
<use xlink:href="#lattice_point" x="11.52" y="9.93" style="fill:#6e7175;"/>
<use xlink:href="#lattice_point" x="15.36" y="9.93" style="fill:#6e7175;"/>
<use xlink:href="#lattice_point" x="3.84" y="15.36" style="fill:#6e7175;"/>
<use xlink:href="#lattice_point" x="7.68" y="15.36" style="fill:#6e7175;"/>
<use xlink:href="#lattice_point" x="11.52" y="15.36" style="fill:#6e7175;"/>
<use xlink:href="#lattice_point" x="15.36" y="15.36" style="fill:#6e7175;"/>
<use xlink:href="#lattice_point" x="3.84" y="17.61" style="fill:#6e7175;"/>
<use xlink:href="#lattice_point" x="7.68" y="17.61" style="fill:#6e7175;"/>
<use xlink:href="#lattice_point" x="11.52" y="17.61" style="fill:#6e7175;"/>
<use xlink:href="#lattice_point" x="15.36" y="17.61" style="fill:#6e7175;"/>
<use xlink:href="#sidb_color" x="3.84" y="7.68" style="fill:#E34857; fill-opacity:1; stroke:#E34857; stroke-width:0.3;"/>
<use xlink:href="#sidb_color" x="7.68" y="7.68" style="fill:#C8C8C8; fill-opacity:0; stroke:#ffffff; stroke-width:0.3;"/>
<use xlink:href="#sidb_color" x="7.68" y="9.93" style="fill:#00ADAE; fill-opacity:1; stroke:#00ADAE; stroke-width:0.3;"/>
<use xlink:href="#sidb_color" x="15.36" y="17.61" style="fill:#C8C8C8; fill-opacity:0; stroke:#ffffff; stroke-width:0.3;"/> <!-- SVG content placeholder -->
    </g>
</svg>)",
                FICTION_VERSION, FICTION_REPO);

TEMPLATE_TEST_CASE("Generate SiDB layout in SVG for cell-level layout and charge distribution surface",
                   "[write-sidb-layout-svg]", sidb_cell_clk_lyt_cube, sidb_100_cell_clk_lyt_cube, sidb_100_cell_clk_lyt,
                   sidb_cell_clk_lyt)
{
    TestType layout{{4, 4}};

    layout.assign_cell_type({0, 0}, sidb_technology::cell_type::NORMAL);
    layout.assign_cell_type({1, 1}, sidb_technology::cell_type::NORMAL);
    layout.assign_cell_type({1, 0}, sidb_technology::cell_type::NORMAL);
    layout.assign_cell_type({3, 3}, sidb_technology::cell_type::NORMAL);

    SECTION("cell-level layout")
    {
        SECTION("light mode")
        {
            std::stringstream os_light_cds;

            write_sidb_layout_svg_params params{};
            params.color_background = write_sidb_layout_svg_params::color_mode::LIGHT;
            write_sidb_layout_svg(layout, os_light_cds, params);

            // Retrieve the SVG content
            const auto generated_svg = os_light_cds.str();

            // Normalize both SVG strings
            const std::string normalized_generated_svg = normalize_svg(generated_svg);
            const std::string normalized_expected_svg  = normalize_svg(EXPECTED_SVG_LIGHT_CELL_LEVEL);

            // Perform the comparison
            REQUIRE(normalized_generated_svg == normalized_expected_svg);
        }

        SECTION("dark mode")
        {
            std::stringstream os_light_cds;

            write_sidb_layout_svg_params params{};
            params.color_background = write_sidb_layout_svg_params::color_mode::DARK;
            write_sidb_layout_svg(layout, os_light_cds, params);

            // Retrieve the SVG content
            const auto generated_svg = os_light_cds.str();

            // Normalize both SVG strings
            const auto normalized_generated_svg = normalize_svg(generated_svg);
            const auto normalized_expected_svg  = normalize_svg(EXPECTED_SVG_DARK_CELL_LEVEL);

            // Perform the comparison
            REQUIRE(normalized_generated_svg == normalized_expected_svg);
        }

        SECTION("dark mode and hidden lattice")
        {
            std::stringstream os_light_cds;

            write_sidb_layout_svg_params params{};
            params.color_background = write_sidb_layout_svg_params::color_mode::DARK;
            params.lattice_mode     = write_sidb_layout_svg_params::sidb_lattice_mode::HIDE_LATTICE;
            write_sidb_layout_svg(layout, os_light_cds, params);

            // Retrieve the SVG content
            const auto generated_svg = os_light_cds.str();

            // Normalize both SVG strings
            const auto normalized_generated_svg = normalize_svg(generated_svg);
            const auto normalized_expected_svg  = normalize_svg(EXPECTED_SVG_DARK_CELL_LEVEL_HIDE_LATTICE);

            // Perform the comparison
            REQUIRE(normalized_generated_svg == normalized_expected_svg);
        }
    }
    SECTION("charge distribution")
    {
        charge_distribution_surface cds{layout};
        cds.assign_charge_state({0, 0}, sidb_charge_state::POSITIVE);
        cds.assign_charge_state({1, 1}, sidb_charge_state::NEGATIVE);
        cds.assign_charge_state({1, 0}, sidb_charge_state::NEUTRAL);
        cds.assign_charge_state({3, 3}, sidb_charge_state::NEUTRAL);

        SECTION("light mode")
        {

            std::stringstream os_light_cds;

            write_sidb_layout_svg_params params{};
            params.color_background = write_sidb_layout_svg_params::color_mode::LIGHT;
            write_sidb_layout_svg(cds, os_light_cds, params);

            // Retrieve the SVG content
            const auto generated_svg = os_light_cds.str();

            // Normalize both SVG strings
            const std::string normalized_generated_svg = normalize_svg(generated_svg);
            const std::string normalized_expected_svg  = normalize_svg(EXPECTED_SVG_LIGHT_CHARGE_DISTRIBUTION);

            // Perform the comparison
            REQUIRE(normalized_generated_svg == normalized_expected_svg);
        }

        SECTION("dark mode")
        {

            std::stringstream os_light_cds;

            write_sidb_layout_svg_params params{};
            params.color_background = write_sidb_layout_svg_params::color_mode::DARK;
            write_sidb_layout_svg(cds, os_light_cds, params);

            // Retrieve the SVG content
            const auto generated_svg = os_light_cds.str();

            // Normalize both SVG strings
            const auto normalized_generated_svg = normalize_svg(generated_svg);
            const auto normalized_expected_svg  = normalize_svg(EXPECTED_SVG_DARK_CHARGE_DISTRIBUTION);

            // Perform the comparison
            REQUIRE(normalized_generated_svg == normalized_expected_svg);
        }
    }
};

TEMPLATE_TEST_CASE(
    "Generate SiDB layout in SiQAD coordinates in SVG for cell-level layout and charge distribution surface",
    "[write-sidb-layout-svg]", sidb_cell_clk_lyt_siqad, sidb_100_cell_clk_lyt_siqad)
{
    TestType layout{{4, 4}};

    layout.assign_cell_type({0, 0}, sidb_technology::cell_type::NORMAL);
    layout.assign_cell_type({1, 0, 1}, sidb_technology::cell_type::NORMAL);
    layout.assign_cell_type({1, 0}, sidb_technology::cell_type::NORMAL);
    layout.assign_cell_type({3, 1, 1}, sidb_technology::cell_type::NORMAL);

    SECTION("cell-level layout")
    {
        SECTION("light mode")
        {
            std::stringstream os_light_cds;

            write_sidb_layout_svg_params params{};
            params.color_background = write_sidb_layout_svg_params::color_mode::LIGHT;
            write_sidb_layout_svg(layout, os_light_cds, params);

            // Retrieve the SVG content
            const auto generated_svg = os_light_cds.str();

            // Normalize both SVG strings
            const std::string normalized_generated_svg = normalize_svg(generated_svg);
            const std::string normalized_expected_svg  = normalize_svg(EXPECTED_SVG_LIGHT_CELL_LEVEL);

            // Perform the comparison
            REQUIRE(normalized_generated_svg == normalized_expected_svg);
        }

        SECTION("dark mode")
        {
            std::stringstream os_light_cds;

            write_sidb_layout_svg_params params{};
            params.color_background = write_sidb_layout_svg_params::color_mode::DARK;
            write_sidb_layout_svg(layout, os_light_cds, params);

            // Retrieve the SVG content
            const auto generated_svg = os_light_cds.str();

            // Normalize both SVG strings
            const auto normalized_generated_svg = normalize_svg(generated_svg);
            const auto normalized_expected_svg  = normalize_svg(EXPECTED_SVG_DARK_CELL_LEVEL);

            // Perform the comparison
            REQUIRE(normalized_generated_svg == normalized_expected_svg);
        }
    }
    SECTION("charge distribution")
    {
        charge_distribution_surface cds{layout};
        cds.assign_charge_state({0, 0}, sidb_charge_state::POSITIVE);
        cds.assign_charge_state({1, 0, 1}, sidb_charge_state::NEGATIVE);
        cds.assign_charge_state({1, 0}, sidb_charge_state::NEUTRAL);
        cds.assign_charge_state({3, 1, 1}, sidb_charge_state::NEUTRAL);

        SECTION("light mode")
        {

            std::stringstream os_light_cds;

            write_sidb_layout_svg_params params{};
            params.color_background = write_sidb_layout_svg_params::color_mode::LIGHT;
            write_sidb_layout_svg(cds, os_light_cds, params);

            // Retrieve the SVG content
            const auto generated_svg = os_light_cds.str();

            // Normalize both SVG strings
            const std::string normalized_generated_svg = normalize_svg(generated_svg);
            const std::string normalized_expected_svg  = normalize_svg(EXPECTED_SVG_LIGHT_CHARGE_DISTRIBUTION);

            // Perform the comparison
            REQUIRE(normalized_generated_svg == normalized_expected_svg);
        }

        SECTION("dark mode")
        {

            std::stringstream os_light_cds;

            write_sidb_layout_svg_params params{};
            params.color_background = write_sidb_layout_svg_params::color_mode::DARK;
            write_sidb_layout_svg(cds, os_light_cds, params);

            // Retrieve the SVG content
            const auto generated_svg = os_light_cds.str();

            // Normalize both SVG strings
            const auto normalized_generated_svg = normalize_svg(generated_svg);
            const auto normalized_expected_svg  = normalize_svg(EXPECTED_SVG_DARK_CHARGE_DISTRIBUTION);

            // Perform the comparison
            REQUIRE(normalized_generated_svg == normalized_expected_svg);
        }
    }
};

TEMPLATE_TEST_CASE("Generate SiDB layout on the H-Si(111)-1x1 surface in SVG for cell-level layout",
                   "[write-sidb-layout-svg]", sidb_111_cell_clk_lyt_cube, sidb_111_cell_clk_lyt)
{
    TestType layout{{4, 4}};

    layout.assign_cell_type({0, 0}, sidb_technology::cell_type::NORMAL);
    layout.assign_cell_type({1, 1}, sidb_technology::cell_type::NORMAL);
    layout.assign_cell_type({1, 0}, sidb_technology::cell_type::NORMAL);
    layout.assign_cell_type({3, 3}, sidb_technology::cell_type::NORMAL);

    SECTION("cell-level layout")
    {
        SECTION("light mode")
        {
            std::stringstream os_light_cds;

            write_sidb_layout_svg_params params{};
            params.color_background = write_sidb_layout_svg_params::color_mode::LIGHT;
            write_sidb_layout_svg(layout, os_light_cds, params);

            // Retrieve the SVG content
            const auto generated_svg = os_light_cds.str();

            // Normalize both SVG strings
            const std::string normalized_generated_svg = normalize_svg(generated_svg);
            const std::string normalized_expected_svg  = normalize_svg(EXPECTED_SVG_LIGHT_CELL_LEVEL_111);

            // Perform the comparison
            REQUIRE(normalized_generated_svg == normalized_expected_svg);
        }

        SECTION("dark mode")
        {
            std::stringstream os_light_cds;

            write_sidb_layout_svg_params params{};
            params.color_background = write_sidb_layout_svg_params::color_mode::DARK;
            write_sidb_layout_svg(layout, os_light_cds, params);

            // Retrieve the SVG content
            const auto generated_svg = os_light_cds.str();

            // Normalize both SVG strings
            const auto normalized_generated_svg = normalize_svg(generated_svg);
            const auto normalized_expected_svg  = normalize_svg(EXPECTED_SVG_DARK_CELL_LEVEL_111);

            // Perform the comparison
            REQUIRE(normalized_generated_svg == normalized_expected_svg);
        }
    }
};
