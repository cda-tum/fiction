name: ☂️ • Coverage

on:
  push:
    branches: ["main"]
    paths:
      - "**/*.hpp"
      - "**/*.cpp"
      - "**/*.cmake"
      - "**/CMakeLists.txt"
      - "libs/**"
      - ".github/workflows/coverage.yml"
      - "!bindings/mnt/pyfiction/include/pyfiction/pybind11_mkdoc_docstrings.hpp"
  pull_request:
    branches: ["main"]
    paths:
      - "**/*.hpp"
      - "**/*.cpp"
      - "**/*.cmake"
      - "**/CMakeLists.txt"
      - "libs/**"
      - ".github/workflows/coverage.yml"
      - "!bindings/mnt/pyfiction/include/pyfiction/pybind11_mkdoc_docstrings.hpp"
  merge_group:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

env:
  BUILD_TYPE: Debug
  Z3_VERSION: 4.13.0

jobs:
  build_and_test:
    strategy:
      matrix:
        os: [ubuntu-24.04]
        compiler: [g++-14]

    name: Coverage on ${{matrix.os}} with ${{matrix.compiler}}
    runs-on: ${{matrix.os}}

    steps:
      - name: Install Dependencies
        run: sudo apt-get update && sudo apt-get install -yq ${{matrix.compiler}} lcov ninja-build

      - name: Clone Repository
        uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: "${{matrix.os}}-${{matrix.compiler}}"
          variant: ccache
          save: true
          max-size: 10G

      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.14.x"
          cache: "pip"

      - name: Setup mold
        uses: rui314/setup-mold@v1

      - name: Install pip packages
        uses: BSFishy/pip-action@v1
        with:
          requirements: ${{github.workspace}}/libs/mugen/requirements.txt

      - name: Setup Z3 Solver
        id: z3
        uses: cda-tum/setup-z3@v1
        with:
          version: ${{env.Z3_VERSION}}
          platform: linux
          architecture: x64
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - name: Configure CMake
        run: >
          cmake -S ${{github.workspace}} -B ${{github.workspace}}/build -G Ninja
          -DCMAKE_CXX_COMPILER=${{matrix.compiler}}
          -DCMAKE_BUILD_TYPE=$BUILD_TYPE
          -DFICTION_ENABLE_UNITY_BUILD=ON
          -DFICTION_ENABLE_PCH=ON
          -DFICTION_CLI=OFF
          -DFICTION_TEST=ON
          -DFICTION_BENCHMARK=OFF
          -DFICTION_Z3=ON
          -DFICTION_ALGLIB=ON
          -DFICTION_ENABLE_MUGEN=ON
          -DFICTION_PROGRESS_BARS=OFF
          -DFICTION_WARNINGS_AS_ERRORS=OFF
          -DFICTION_ENABLE_COVERAGE=ON
          -DMOCKTURTLE_EXAMPLES=OFF

      - name: Build
        run: cmake --build ${{github.workspace}}/build --config $BUILD_TYPE --parallel

      - name: Test
        working-directory: ${{github.workspace}}/build
        run: ctest -C $BUILD_TYPE --output-on-failure --repeat until-pass:3 --parallel

      - name: Generate Coverage Report
        run: |
          lcov --gcov-tool gcov-14 -t "fiction-coverage" -o lcov.info -c -d ${{github.workspace}}/build/
          lcov --gcov-tool gcov-14 -e lcov.info "${{github.workspace}}/include*" -o lcov_filtered.info
          lcov -l lcov_filtered.info

      - name: Upload report to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: ${{github.workspace}}/lcov_filtered.info
          fail_ci_if_error: true
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}
