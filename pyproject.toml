[build-system]
requires = [
    "scikit-build-core>=0.10.1",
    "setuptools-scm>=8.1"
]
build-backend = "scikit_build_core.build"

[project]
name = "mnt.pyfiction"
version = "0.6.7"
description = "Design Automation for Field-coupled Nanotechnologies"
readme = "README.md"
authors = [
    { name = "Marcel Walter", email = "marcel.walter@tum.de" },
    { name = "Jan Drewniok", email = "jan.drewniok@tum.de" },
    { name = "Simon Hofmann", email = "simon.t.hofmann@tum.de" },
    { name = "Benjamin Hien", email = "benjamin.hien@tum.de" },
    { name = "Willem Lambooy", email = "willem.lambooy@tum.de" }
]
keywords = ["MNT", "fiction", "nanotechnology", "FCN", "QCA", "NML", "SiDB", "design automation", "placement", "routing", "clocking", "simulation"]
license = { file = "LICENSE.txt" }

classifiers = [
    'Development Status :: 4 - Beta',
    'Programming Language :: Python :: 3',
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    'Programming Language :: C++',
    'Environment :: Console',
    'License :: OSI Approved :: MIT License',
    'Operating System :: Microsoft :: Windows',
    'Operating System :: MacOS',
    'Operating System :: POSIX :: Linux',
    'Intended Audience :: Science/Research',
    'Natural Language :: English',
    'Topic :: Scientific/Engineering :: Electronic Design Automation (EDA)',
]

requires-python = ">=3.9"
dependencies = [
    "z3-solver>=4.8.0"
]

[project.optional-dependencies]
test = ["pytest>=7.2", "mnt.pyfiction"]
docs = [
    "setuptools-scm>=8.1",
    "sphinx==8.1.3; python_version >= '3.10'",
    "breathe==4.35.0",
    "sphinx-rtd-theme==3.0.2",
    "sphinx-tabs==3.4.7",
    "z3-solver>=4.8.0",
    "mnt.pyfiction"
]

[project.urls]
Source = 'https://github.com/cda-tum/fiction'
Tracker = 'https://github.com/cda-tum/fiction/issues'
Documentation = 'https://fiction.readthedocs.io/en/latest/'
Research = 'https://www.cda.cit.tum.de/research/fcn/'


[tool.scikit-build]
# Protect the configuration against future changes in scikit-build-core
minimum-version = "build-system.requires"
# Set the wheel install directory
wheel.install-dir = "mnt/pyfiction"
# Set required Ninja version
ninja.version = ">=1.10"
# Setuptools-style build caching in a local directory
build-dir = "build/{wheel_tag}/{build_type}"
# Explicitly set the package directory
wheel.packages = ["bindings/mnt"]
# Only build the Python bindings target
build.targets = ["pyfiction"]
# Only install the Python package component
install.components = ["fiction_Python"]

sdist.exclude = [
    "**/.git",
    "**/.github",
    "**/app",
    "**/apps",
    "**/bib",
    "**/css",
    "**/cli",
    "**/html",
    "**/doc",
    "**/docs",
    "**/benchmark",
    "**/benchmarks",
    "**/experiment",
    "**/experiments",
    "**/examples",
    "**/include",
    "**/libs",
    "**/cmake-build-**",
    "**/plots",
    "**/test",
    "**/tests",
    "**/nauty",
    "**.cpp",
    "**.hpp",
    "**.pdf",
    "**.ans",
    "**.out",
    "**.log",
    "**.xml",
    "**CMakeList.txt",
    "**__pycache__"
]

[tool.scikit-build.cmake.define]
MOCKTURTLE_EXAMPLES = "OFF"
FICTION_PROGRESS_BARS = "OFF"
FICTION_CLI = "OFF"
FICTION_TEST = "OFF"
FICTION_EXPERIMENTS = "OFF"
FICTION_ENABLE_IPO = "ON"
FICTION_ENABLE_PCH = "ON"
FICTION_ENABLE_UNITY_BUILD = "ON"
FICTION_Z3 = "ON"
FICTION_PYTHON_BINDINGS = "ON"

[[tool.scikit-build.overrides]]
if.python-version = ">=3.13"
if.abi-flags = "t"
if.platform-system = "win32"
inherit.cmake.define = "append"
cmake.define.DISABLE_GIL = "1"


[tool.pytest.ini_options]
minversion = "7.2"
testpaths = ["bindings/mnt/pyfiction/test/"]
addopts = ["-ra", "--strict-markers", "--strict-config", "--showlocals"]
log_cli_level = "INFO"
xfail_strict = true


[tool.cibuildwheel]
build = "cp3*"
archs = "auto64"
skip = "*-musllinux*"
test-command = "python -c \"from mnt import pyfiction\""
build-frontend = "build[uv]"
free-threaded-support = true
manylinux-x86_64-image = "manylinux_2_28"

[tool.cibuildwheel.linux]
environment = { Z3_ROOT = "/opt/python/cp311-cp311/lib/python3.11/site-packages/z3" }
before-all = "/opt/python/cp311-cp311/bin/pip install z3-solver>=4.8.0"
repair-wheel-command = [
    "export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/python/cp311-cp311/lib/python3.11/site-packages/z3/lib",
    "auditwheel repair -w {dest_dir} {wheel}",
]

[tool.cibuildwheel.macos]
environment = { MACOSX_DEPLOYMENT_TARGET = "11.0" }

[tool.cibuildwheel.windows]
before-build = "pip install delvewheel>=1.7.3"
repair-wheel-command = "delvewheel repair -v -w {dest_dir} {wheel} --namespace-pkg mnt"
environment = { CMAKE_GENERATOR = "Ninja" }

[[tool.cibuildwheel.overrides]]
select = "*-macosx_arm64"
environment = { MACOSX_DEPLOYMENT_TARGET = "11.0" }


[tool.uv]
reinstall-package = ["mnt.pyfiction"]


[tool.mypy]
files = ["bindings/mnt/pyfiction", "noxfile.py"]
mypy_path = ["$MYPY_CONFIG_FILE_DIR/bindings"]
warn_unused_configs = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
strict = true
disallow_untyped_defs = false
explicit_package_bases = true
warn_unreachable = true


[tool.ruff]
line-length = 120
preview = true
unsafe-fixes = true


[tool.ruff.lint]
extend-select = [
    "A", # flake8-builtins
    "ANN", # flake8-annotations
    "ARG", # flake8-unused-arguments
    "ASYNC", # flake8-async
    "B", "B904", # flake8-bugbear
    "C4", # flake8-comprehensions
    # "D", # pydocstyle
    "EM", # flake8-errmsg
    "EXE", # flake8-executable
    "FA", # flake8-future-annotations
    "FLY", # flynt
    "FURB", # refurb
    "I", # isort
    "ICN", # flake8-import-conventions
    "ISC", # flake8-implicit-str-concat
    "LOG", # flake8-logging-format
    # "N", # flake8-naming
    "NPY", # numpy
    "PERF", # perflint
    "PGH", # pygrep-hooks
    "PIE", # flake8-pie
    # "PL", # pylint
    # "PT", # flake8-pytest-style
    # "PTH", # flake8-use-pathlib
    "PYI", # flake8-pyi
    "Q", # flake8-quotes
    "RET", # flake8-return
    "RSE", # flake8-raise
    "RUF", # Ruff-specific
    # "S", # flake8-bandit
    "SLF", # flake8-self
    "SLOT", # flake8-slots
    "SIM", # flake8-simplify
    "T20", # flake8-print
    "TCH", # flake8-type-checking
    "TID251", # flake8-tidy-imports.banned-api
    "TRY", # tryceratops
    "UP", # pyupgrade
    "YTT", # flake8-2020
]

ignore = [
    "ANN101", # Missing type annotation for `self` in method
    "ANN102", # Missing type annotatio n for `cls` in classmethod
    "ISC001", # Conflicts with formatter
    "PLR09", # Too many <...>
    "PLR2004", # Magic value used in comparison
    "S101", # Use of assert detected
]

[tool.ruff.lint.per-file-ignores]
"bindings/mnt/pyfiction/test/**" = ["T20", "ANN", "D"]
"docs/**" = ["T20", "A"]
"noxfile.py" = ["T20", "TID251"]
"*.pyi" = ["D418", "PYI021"]  # pydocstyle
"*.ipynb" = [
    "D", # pydocstyle
    "E402", # Allow imports to appear anywhere in Jupyter notebooks
    "I002", # Allow missing `from __future__ import annotations` import
]

[tool.ruff.lint.pydocstyle]
convention = "google"
