from typing import overload


class offset_coordinate:
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, int_repr: int) -> None: ...

    @overload
    def __init__(self, x: int, y: int, z: int) -> None: ...

    @overload
    def __init__(self, c: offset_coordinate) -> None: ...

    @overload
    def __init__(self, c: tuple[int, int, int]) -> None: ...

    x: int
    y: int
    z: int

    def __eq__(self, other: object) -> bool: ...

    def __ne__(self, other: object) -> bool: ...

    def __lt__(self, other: offset_coordinate) -> bool: ...

    def __gt__(self, other: offset_coordinate) -> bool: ...

    def __le__(self, other: offset_coordinate) -> bool: ...

    def __ge__(self, other: offset_coordinate) -> bool: ...

    def __repr__(self) -> str: ...

    def __hash__(self) -> int: ...

# TODO for cube_coordinate and siqad_coordinate

def offset_area(coord: offset_coordinate) -> int: ...
# def cube_area(coord: cube_coordinate) -> int: ...
# def siqad_area(coord: siqad_coordinate) -> int: ...

def offset_volume(coord: offset_coordinate) -> int: ...
# def cube_volume(coord: cube_coordinate) -> int: ...
# def siqad_volume(coord: siqad_coordinate) -> int: ...

# ...
