from typing import overload, Union


class offset_coordinate:
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, int_repr: int) -> None: ...

    @overload
    def __init__(self, x: int, y: int, z: int) -> None: ...

    @overload
    def __init__(self, c: offset_coordinate) -> None: ...

    @overload
    def __init__(self, c: tuple[int, int, int]) -> None: ...

    x: int
    y: int
    z: int

    def __eq__(self, other: object) -> bool: ...

    def __ne__(self, other: object) -> bool: ...

    def __lt__(self, other: offset_coordinate) -> bool: ...

    def __gt__(self, other: offset_coordinate) -> bool: ...

    def __le__(self, other: offset_coordinate) -> bool: ...

    def __ge__(self, other: offset_coordinate) -> bool: ...

    def __repr__(self) -> str: ...

    def __hash__(self) -> int: ...


class cube_coordinate:
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, x: int, y: int, z: int = 0) -> None: ...

    @overload
    def __init__(self, c: cube_coordinate) -> None: ...

    @overload
    def __init__(self, c: tuple[int, int, int]) -> None: ...

    x: int
    y: int
    z: int

    def __eq__(self, other: object) -> bool: ...

    def __ne__(self, other: object) -> bool: ...

    def __lt__(self, other: cube_coordinate) -> bool: ...

    def __gt__(self, other: cube_coordinate) -> bool: ...

    def __le__(self, other: cube_coordinate) -> bool: ...

    def __ge__(self, other: cube_coordinate) -> bool: ...

    def __repr__(self) -> str: ...

    def __hash__(self) -> int: ...


class siqad_coordinate:
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, x: int, y: int, z: int = 0) -> None: ...

    @overload
    def __init__(self, c: siqad_coordinate) -> None: ...

    @overload
    def __init__(self, c: tuple[int, int, int]) -> None: ...

    x: int
    y: int
    z: int

    def __eq__(self, other: object) -> bool: ...

    def __ne__(self, other: object) -> bool: ...

    def __lt__(self, other: siqad_coordinate) -> bool: ...

    def __gt__(self, other: siqad_coordinate) -> bool: ...

    def __le__(self, other: siqad_coordinate) -> bool: ...

    def __ge__(self, other: siqad_coordinate) -> bool: ...

    def __repr__(self) -> str: ...

    def __hash__(self) -> int: ...


# For consistent behavior:
def area(coord: Union[offset_coordinate, cube_coordinate, siqad_coordinate]) -> float: ...


def volume(coord: Union[offset_coordinate, cube_coordinate, siqad_coordinate]) -> float: ...


# For conversions with potentially nuanced behavior:
@overload
def to_offset_coord(coord: siqad_coordinate) -> offset_coordinate: ...


@overload
def to_cube_coord(coord: siqad_coordinate) -> cube_coordinate: ...


@overload
def to_siqad_coord(coord: offset_coordinate) -> siqad_coordinate: ...


@overload
def to_siqad_coord(coord: cube_coordinate) -> siqad_coordinate: ...

# ...
