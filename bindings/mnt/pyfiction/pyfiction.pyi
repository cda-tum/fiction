from typing import overload, Union, List, Optional


class offset_coordinate:
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, int_repr: int) -> None: ...

    @overload
    def __init__(self, x: int, y: int, z: int) -> None: ...

    @overload
    def __init__(self, c: offset_coordinate) -> None: ...

    @overload
    def __init__(self, c: tuple[int, int, int]) -> None: ...

    x: int
    y: int
    z: int

    def __eq__(self, other: object) -> bool: ...

    def __ne__(self, other: object) -> bool: ...

    def __lt__(self, other: offset_coordinate) -> bool: ...

    def __gt__(self, other: offset_coordinate) -> bool: ...

    def __le__(self, other: offset_coordinate) -> bool: ...

    def __ge__(self, other: offset_coordinate) -> bool: ...

    def __repr__(self) -> str: ...

    def __hash__(self) -> int: ...


class cube_coordinate:
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, x: int, y: int, z: int = 0) -> None: ...

    @overload
    def __init__(self, c: cube_coordinate) -> None: ...

    @overload
    def __init__(self, c: tuple[int, int, int]) -> None: ...

    x: int
    y: int
    z: int

    def __eq__(self, other: object) -> bool: ...

    def __ne__(self, other: object) -> bool: ...

    def __lt__(self, other: cube_coordinate) -> bool: ...

    def __gt__(self, other: cube_coordinate) -> bool: ...

    def __le__(self, other: cube_coordinate) -> bool: ...

    def __ge__(self, other: cube_coordinate) -> bool: ...

    def __repr__(self) -> str: ...

    def __hash__(self) -> int: ...


class siqad_coordinate:
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, x: int, y: int, z: int = 0) -> None: ...

    @overload
    def __init__(self, c: siqad_coordinate) -> None: ...

    @overload
    def __init__(self, c: tuple[int, int, int]) -> None: ...

    x: int
    y: int
    z: int

    def __eq__(self, other: object) -> bool: ...

    def __ne__(self, other: object) -> bool: ...

    def __lt__(self, other: siqad_coordinate) -> bool: ...

    def __gt__(self, other: siqad_coordinate) -> bool: ...

    def __le__(self, other: siqad_coordinate) -> bool: ...

    def __ge__(self, other: siqad_coordinate) -> bool: ...

    def __repr__(self) -> str: ...

    def __hash__(self) -> int: ...


# For consistent behavior:
def area(coord: Union[offset_coordinate, cube_coordinate, siqad_coordinate]) -> float: ...


def volume(coord: Union[offset_coordinate, cube_coordinate, siqad_coordinate]) -> float: ...


# For conversions with potentially nuanced behavior:
@overload
def to_offset_coord(coord: siqad_coordinate) -> offset_coordinate: ...


@overload
def to_cube_coord(coord: siqad_coordinate) -> cube_coordinate: ...


@overload
def to_siqad_coord(coord: offset_coordinate) -> siqad_coordinate: ...


@overload
def to_siqad_coord(coord: cube_coordinate) -> siqad_coordinate: ...


class cartesian_layout:
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, dimension: offset_coordinate) -> None: ...

    def coord(self, x: int, y: int, z: int = 0) -> offset_coordinate: ...

    def x(self) -> int: ...

    def y(self) -> int: ...

    def z(self) -> int: ...

    def area(self) -> int: ...

    def resize(self, dimension: offset_coordinate) -> None: ...

    def north(self, c: offset_coordinate) -> Optional[offset_coordinate]: ...

    def north_east(self, c: offset_coordinate) -> Optional[offset_coordinate]: ...

    def east(self, c: offset_coordinate) -> Optional[offset_coordinate]: ...

    def south_east(self, c: offset_coordinate) -> Optional[offset_coordinate]: ...

    def south(self, c: offset_coordinate) -> Optional[offset_coordinate]: ...

    def south_west(self, c: offset_coordinate) -> Optional[offset_coordinate]: ...

    def west(self, c: offset_coordinate) -> Optional[offset_coordinate]: ...

    def north_west(self, c: offset_coordinate) -> Optional[offset_coordinate]: ...

    def above(self, c: offset_coordinate) -> Optional[offset_coordinate]: ...

    def below(self, c: offset_coordinate) -> Optional[offset_coordinate]: ...

    def is_north_of(self, c1: offset_coordinate, c2: offset_coordinate) -> bool: ...

    def is_east_of(self, c1: offset_coordinate, c2: offset_coordinate) -> bool: ...

    def is_south_of(self, c1: offset_coordinate, c2: offset_coordinate) -> bool: ...

    def is_west_of(self, c1: offset_coordinate, c2: offset_coordinate) -> bool: ...

    def is_adjacent_of(self, c1: offset_coordinate, c2: offset_coordinate) -> bool: ...

    def is_adjacent_elevation_of(self, c1: offset_coordinate, c2: offset_coordinate) -> bool: ...

    def is_above(self, c1: offset_coordinate, c2: offset_coordinate) -> bool: ...

    def is_below(self, c1: offset_coordinate, c2: offset_coordinate) -> bool: ...

    def is_northwards_of(self, c1: offset_coordinate, c2: offset_coordinate) -> bool: ...

    def is_eastwards_of(self, c1: offset_coordinate, c2: offset_coordinate) -> bool: ...

    def is_southwards_of(self, c1: offset_coordinate, c2: offset_coordinate) -> bool: ...

    def is_westwards_of(self, c1: offset_coordinate, c2: offset_coordinate) -> bool: ...

    def is_at_northern_border(self, c: offset_coordinate) -> bool: ...

    def is_at_eastern_border(self, c: offset_coordinate) -> bool: ...

    def is_at_southern_border(self, c: offset_coordinate) -> bool: ...

    def is_at_western_border(self, c: offset_coordinate) -> bool: ...

    def is_at_any_border(self, c: offset_coordinate) -> bool: ...

    def northern_border_of(self, c: offset_coordinate) -> Optional[offset_coordinate]: ...

    def eastern_border_of(self, c: offset_coordinate) -> Optional[offset_coordinate]: ...

    def southern_border_of(self, c: offset_coordinate) -> Optional[offset_coordinate]: ...

    def western_border_of(self, c: offset_coordinate) -> Optional[offset_coordinate]: ...

    def is_ground_layer(self, c: offset_coordinate) -> bool: ...

    def is_crossing_layer(self, c: offset_coordinate) -> bool: ...

    def is_within_bounds(self, c: offset_coordinate) -> bool: ...

    def offset_coordinates(self) -> List[offset_coordinate]: ...

    def ground_offset_coordinates(self) -> List[offset_coordinate]: ...

    def adjacent_offset_coordinates(self, c: offset_coordinate) -> List[offset_coordinate]: ...

    def adjacent_opposite_offset_coordinates(self, c: offset_coordinate) -> List[offset_coordinate]: ...

    def __repr__(self) -> str: ...


class shifted_cartesian_layout:
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, dimension: offset_coordinate) -> None: ...

    def coord(self, x: int, y: int, z: int = 0) -> offset_coordinate: ...

    def x(self) -> int: ...

    def y(self) -> int: ...

    def z(self) -> int: ...

    def area(self) -> int: ...

    def resize(self, dimension: offset_coordinate) -> None: ...

    def north(self, c: offset_coordinate) -> Optional[offset_coordinate]: ...

    def north_east(self, c: offset_coordinate) -> Optional[offset_coordinate]: ...

    def east(self, c: offset_coordinate) -> Optional[offset_coordinate]: ...

    def south_east(self, c: offset_coordinate) -> Optional[offset_coordinate]: ...

    def south(self, c: offset_coordinate) -> Optional[offset_coordinate]: ...

    def south_west(self, c: offset_coordinate) -> Optional[offset_coordinate]: ...

    def west(self, c: offset_coordinate) -> Optional[offset_coordinate]: ...

    def north_west(self, c: offset_coordinate) -> Optional[offset_coordinate]: ...

    def above(self, c: offset_coordinate) -> Optional[offset_coordinate]: ...

    def below(self, c: offset_coordinate) -> Optional[offset_coordinate]: ...

    def is_north_of(self, c1: offset_coordinate, c2: offset_coordinate) -> bool: ...

    def is_east_of(self, c1: offset_coordinate, c2: offset_coordinate) -> bool: ...

    def is_south_of(self, c1: offset_coordinate, c2: offset_coordinate) -> bool: ...

    def is_west_of(self, c1: offset_coordinate, c2: offset_coordinate) -> bool: ...

    def is_adjacent_of(self, c1: offset_coordinate, c2: offset_coordinate) -> bool: ...

    def is_adjacent_elevation_of(self, c1: offset_coordinate, c2: offset_coordinate) -> bool: ...

    def is_above(self, c1: offset_coordinate, c2: offset_coordinate) -> bool: ...

    def is_below(self, c1: offset_coordinate, c2: offset_coordinate) -> bool: ...

    def is_northwards_of(self, c1: offset_coordinate, c2: offset_coordinate) -> bool: ...

    def is_eastwards_of(self, c1: offset_coordinate, c2: offset_coordinate) -> bool: ...

    def is_southwards_of(self, c1: offset_coordinate, c2: offset_coordinate) -> bool: ...

    def is_westwards_of(self, c1: offset_coordinate, c2: offset_coordinate) -> bool: ...

    def is_at_northern_border(self, c: offset_coordinate) -> bool: ...

    def is_at_eastern_border(self, c: offset_coordinate) -> bool: ...

    def is_at_southern_border(self, c: offset_coordinate) -> bool: ...

    def is_at_western_border(self, c: offset_coordinate) -> bool: ...

    def is_at_any_border(self, c: offset_coordinate) -> bool: ...

    def northern_border_of(self, c: offset_coordinate) -> Optional[offset_coordinate]: ...

    def eastern_border_of(self, c: offset_coordinate) -> Optional[offset_coordinate]: ...

    def southern_border_of(self, c: offset_coordinate) -> Optional[offset_coordinate]: ...

    def western_border_of(self, c: offset_coordinate) -> Optional[offset_coordinate]: ...

    def is_ground_layer(self, c: offset_coordinate) -> bool: ...

    def is_crossing_layer(self, c: offset_coordinate) -> bool: ...

    def is_within_bounds(self, c: offset_coordinate) -> bool: ...

    def offset_coordinates(self) -> List[offset_coordinate]: ...

    def ground_offset_coordinates(self) -> List[offset_coordinate]: ...

    def adjacent_offset_coordinates(self, c: offset_coordinate) -> List[offset_coordinate]: ...

    def adjacent_opposite_offset_coordinates(self, c: offset_coordinate) -> List[offset_coordinate]: ...

    def __repr__(self) -> str: ...


class hexagonal_layout:
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, dimension: cube_coordinate) -> None: ...

    def coord(self, x: int, y: int, z: int = 0) -> cube_coordinate: ...

    def x(self) -> int: ...

    def y(self) -> int: ...

    def z(self) -> int: ...

    def area(self) -> int: ...

    def resize(self, dimension: cube_coordinate) -> None: ...

    def north(self, c: cube_coordinate) -> Optional[cube_coordinate]: ...

    def north_east(self, c: cube_coordinate) -> Optional[cube_coordinate]: ...

    def east(self, c: cube_coordinate) -> Optional[cube_coordinate]: ...

    def south_east(self, c: cube_coordinate) -> Optional[cube_coordinate]: ...

    def south(self, c: cube_coordinate) -> Optional[cube_coordinate]: ...

    def south_west(self, c: cube_coordinate) -> Optional[cube_coordinate]: ...

    def west(self, c: cube_coordinate) -> Optional[cube_coordinate]: ...

    def north_west(self, c: cube_coordinate) -> Optional[cube_coordinate]: ...

    def above(self, c: cube_coordinate) -> Optional[cube_coordinate]: ...

    def below(self, c: cube_coordinate) -> Optional[cube_coordinate]: ...

    def is_north_of(self, c1: cube_coordinate, c2: cube_coordinate) -> bool: ...

    def is_east_of(self, c1: cube_coordinate, c2: cube_coordinate) -> bool: ...

    def is_south_of(self, c1: cube_coordinate, c2: cube_coordinate) -> bool: ...

    def is_west_of(self, c1: cube_coordinate, c2: cube_coordinate) -> bool: ...

    def is_adjacent_of(self, c1: cube_coordinate, c2: cube_coordinate) -> bool: ...

    def is_adjacent_elevation_of(self, c1: cube_coordinate, c2: cube_coordinate) -> bool: ...

    def is_above(self, c1: cube_coordinate, c2: cube_coordinate) -> bool: ...

    def is_below(self, c1: cube_coordinate, c2: cube_coordinate) -> bool: ...

    def is_northwards_of(self, c1: cube_coordinate, c2: cube_coordinate) -> bool: ...

    def is_eastwards_of(self, c1: cube_coordinate, c2: cube_coordinate) -> bool: ...

    def is_southwards_of(self, c1: cube_coordinate, c2: cube_coordinate) -> bool: ...

    def is_westwards_of(self, c1: cube_coordinate, c2: cube_coordinate) -> bool: ...

    def is_at_northern_border(self, c: cube_coordinate) -> bool: ...

    def is_at_eastern_border(self, c: cube_coordinate) -> bool: ...

    def is_at_southern_border(self, c: cube_coordinate) -> bool: ...

    def is_at_western_border(self, c: cube_coordinate) -> bool: ...

    def is_at_any_border(self, c: cube_coordinate) -> bool: ...

    def northern_border_of(self, c: cube_coordinate) -> Optional[cube_coordinate]: ...

    def eastern_border_of(self, c: cube_coordinate) -> Optional[cube_coordinate]: ...

    def southern_border_of(self, c: cube_coordinate) -> Optional[cube_coordinate]: ...

    def western_border_of(self, c: cube_coordinate) -> Optional[cube_coordinate]: ...

    def is_ground_layer(self, c: cube_coordinate) -> bool: ...

    def is_crossing_layer(self, c: cube_coordinate) -> bool: ...

    def is_within_bounds(self, c: cube_coordinate) -> bool: ...

    def cube_coordinates(self) -> List[cube_coordinate]: ...

    def ground_cube_coordinates(self) -> List[cube_coordinate]: ...

    def adjacent_cube_coordinates(self, c: cube_coordinate) -> List[cube_coordinate]: ...

    def adjacent_opposite_cube_coordinates(self, c: cube_coordinate) -> List[cube_coordinate]: ...

    def __repr__(self) -> str: ...
