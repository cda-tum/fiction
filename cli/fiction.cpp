#include "commands.hpp"
#include "stores.hpp"

#include <string_view>

namespace alice
{

constexpr inline std::string_view FICTION_CLI_CATEGORY_GENERAL         = "General";
constexpr inline std::string_view FICTION_CLI_CATEGORY_IO              = "I/O";
constexpr inline std::string_view FICTION_CLI_CATEGORY_LOGIC           = "Logic";
constexpr inline std::string_view FICTION_CLI_CATEGORY_VERIFICATION    = "Verification";
constexpr inline std::string_view FICTION_CLI_CATEGORY_PHYSICAL_DESIGN = "Physical Design";
constexpr inline std::string_view FICTION_CLI_CATEGORY_TECHNOLOGY      = "Technology";
constexpr inline std::string_view FICTION_CLI_CATEGORY_SIMULATION      = "Simulation";

// general commands
ALICE_ADD_COMMAND(clear, FICTION_CLI_CATEGORY_GENERAL)
ALICE_ADD_COMMAND(version, FICTION_CLI_CATEGORY_GENERAL)

// input/output commands
ALICE_ADD_COMMAND(blif, FICTION_CLI_CATEGORY_IO)
ALICE_ADD_COMMAND(fgl, FICTION_CLI_CATEGORY_IO)
ALICE_ADD_COMMAND(fqca, FICTION_CLI_CATEGORY_IO)
ALICE_ADD_COMMAND(qca, FICTION_CLI_CATEGORY_IO)
ALICE_ADD_COMMAND(qcc, FICTION_CLI_CATEGORY_IO)
ALICE_ADD_COMMAND(qll, FICTION_CLI_CATEGORY_IO)
ALICE_ADD_COMMAND(read, FICTION_CLI_CATEGORY_IO)
ALICE_ADD_COMMAND(sqd, FICTION_CLI_CATEGORY_IO)
ALICE_ADD_COMMAND(tt, FICTION_CLI_CATEGORY_IO)
ALICE_ADD_COMMAND(verilog, FICTION_CLI_CATEGORY_IO)

// logic synthesis commands
#ifdef FICTION_LOGIC_SYNTHESIS_FLOW
#if (FICTION_ABC)
ALICE_ADD_COMMAND(abc, FICTION_CLI_CATEGORY_LOGIC)
#endif
ALICE_ADD_COMMAND(akers, FICTION_CLI_CATEGORY_LOGIC)
ALICE_ADD_COMMAND(balance, FICTION_CLI_CATEGORY_LOGIC)
ALICE_ADD_COMMAND(fanouts, FICTION_CLI_CATEGORY_LOGIC)
ALICE_ADD_COMMAND(gates, FICTION_CLI_CATEGORY_LOGIC)
ALICE_ADD_COMMAND(map, FICTION_CLI_CATEGORY_LOGIC)
ALICE_ADD_COMMAND(miginvopt, FICTION_CLI_CATEGORY_LOGIC)
ALICE_ADD_COMMAND(miginvprop, FICTION_CLI_CATEGORY_LOGIC)
ALICE_ADD_COMMAND(random, FICTION_CLI_CATEGORY_LOGIC)
ALICE_ADD_COMMAND(simulate, FICTION_CLI_CATEGORY_LOGIC)
ALICE_ADD_COMMAND(equiv, FICTION_CLI_CATEGORY_VERIFICATION)
#endif

// physical design and validation commands
#ifdef FICTION_PHYSICAL_DESIGN_FLOW
#if (FICTION_Z3_SOLVER)
ALICE_ADD_COMMAND(exact, FICTION_CLI_CATEGORY_PHYSICAL_DESIGN)
#endif
ALICE_ADD_COMMAND(gold, FICTION_CLI_CATEGORY_PHYSICAL_DESIGN)
ALICE_ADD_COMMAND(hex, FICTION_CLI_CATEGORY_PHYSICAL_DESIGN)
#if (MUGEN)
ALICE_ADD_COMMAND(onepass, FICTION_CLI_CATEGORY_PHYSICAL_DESIGN)
#endif
ALICE_ADD_COMMAND(optimize, FICTION_CLI_CATEGORY_PHYSICAL_DESIGN)
ALICE_ADD_COMMAND(ortho, FICTION_CLI_CATEGORY_PHYSICAL_DESIGN)
ALICE_ADD_COMMAND(area, FICTION_CLI_CATEGORY_TECHNOLOGY)
ALICE_ADD_COMMAND(cell, FICTION_CLI_CATEGORY_TECHNOLOGY)
ALICE_ADD_COMMAND(energy, FICTION_CLI_CATEGORY_TECHNOLOGY)
ALICE_ADD_COMMAND(check, FICTION_CLI_CATEGORY_VERIFICATION)
#endif

// physical simulation commands
#ifdef FICTION_SIMULATION_FLOW
#if (FICTION_ALGLIB_ENABLED)
ALICE_ADD_COMMAND(clustercomplete, FICTION_CLI_CATEGORY_SIMULATION)
#endif
ALICE_ADD_COMMAND(opdom, FICTION_CLI_CATEGORY_SIMULATION)
ALICE_ADD_COMMAND(quickexact, FICTION_CLI_CATEGORY_SIMULATION)
ALICE_ADD_COMMAND(quicksim, FICTION_CLI_CATEGORY_SIMULATION)
ALICE_ADD_COMMAND(temp, FICTION_CLI_CATEGORY_SIMULATION)
#endif

}  // namespace alice

ALICE_MAIN(fiction)
